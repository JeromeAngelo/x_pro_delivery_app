// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'core/common/app/features/Delivery_Team/delivery_team/data/models/delivery_team_model.dart';
import 'core/common/app/features/Delivery_Team/delivery_team/domain/entity/delivery_team_entity.dart';
import 'core/common/app/features/Delivery_Team/personels/data/models/personel_models.dart';
import 'core/common/app/features/Delivery_Team/personels/domain/entity/personel_entity.dart';
import 'core/common/app/features/Delivery_Team/vehicle/data/model/vehicle_model.dart';
import 'core/common/app/features/Delivery_Team/vehicle/domain/entity/vehicle_entity.dart';
import 'core/common/app/features/Trip_Ticket/completed_customer/data/models/completed_customer_model.dart';
import 'core/common/app/features/Trip_Ticket/completed_customer/domain/entity/completed_customer_entity.dart';
import 'core/common/app/features/Trip_Ticket/customer/data/model/customer_model.dart';
import 'core/common/app/features/Trip_Ticket/customer/domain/entity/customer_entity.dart';
import 'core/common/app/features/Trip_Ticket/delivery_update/data/models/delivery_update_model.dart';
import 'core/common/app/features/Trip_Ticket/delivery_update/domain/entity/delivery_update_entity.dart';
import 'core/common/app/features/Trip_Ticket/invoice/data/models/invoice_models.dart';
import 'core/common/app/features/Trip_Ticket/invoice/domain/entity/invoice_entity.dart';
import 'core/common/app/features/Trip_Ticket/products/data/model/product_model.dart';
import 'core/common/app/features/Trip_Ticket/products/domain/entity/product_entity.dart';
import 'core/common/app/features/Trip_Ticket/return_product/data/model/return_model.dart';
import 'core/common/app/features/Trip_Ticket/return_product/domain/entity/return_entity.dart';
import 'core/common/app/features/Trip_Ticket/transaction/data/model/transaction_model.dart';
import 'core/common/app/features/Trip_Ticket/transaction/domain/entity/transaction_entity.dart';
import 'core/common/app/features/Trip_Ticket/trip/data/models/trip_models.dart';
import 'core/common/app/features/Trip_Ticket/trip/domain/entity/trip_entity.dart';
import 'core/common/app/features/Trip_Ticket/trip_updates/data/model/trip_update_model.dart';
import 'core/common/app/features/Trip_Ticket/trip_updates/domain/entity/trip_update_entity.dart';
import 'core/common/app/features/Trip_Ticket/undeliverable_customer/data/model/undeliverable_customer_model.dart';
import 'core/common/app/features/Trip_Ticket/undeliverable_customer/domain/entity/undeliverable_customer_entity.dart';
import 'core/common/app/features/Trip_Ticket/update_timeline/data/models/update_timeline_models.dart';
import 'core/common/app/features/Trip_Ticket/update_timeline/domain/entity/update_timeline_entity.dart';
import 'core/common/app/features/checklist/data/model/checklist_model.dart';
import 'core/common/app/features/checklist/domain/entity/checklist_entity.dart';
import 'core/common/app/features/end_trip_checklist/data/model/end_trip_checklist_model.dart';
import 'core/common/app/features/end_trip_checklist/domain/entity/end_checklist_entity.dart';
import 'core/common/app/features/end_trip_otp/data/model/end_trip_model.dart';
import 'core/common/app/features/end_trip_otp/domain/entity/end_trip_otp_entity.dart';
import 'core/common/app/features/otp/data/models/otp_models.dart';
import 'core/common/app/features/otp/domain/entity/otp_entity.dart';
import 'src/auth/data/models/auth_models.dart';
import 'src/auth/domain/entity/users_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 8278670380677883868),
    name: 'LocalUser',
    lastPropertyId: const obx_int.IdUid(27, 3760358077954491990),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8092750327433260),
        name: 'dbId',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3772493454375589782),
        name: 'email',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 3455812979128153817),
        name: 'profilePic',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 2239427814570972009),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 2114045489098269834),
        name: 'tripNumberId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(22, 3520250928743885914),
        name: 'id',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(23, 5097115423714955296),
        name: 'collectionId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(24, 6148436269133931972),
        name: 'collectionName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(25, 761780313740976048),
        name: 'tripId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(40, 124209545521540075),
        relationTarget: 'TripModel',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(26, 8952936577818342021),
        name: 'deliveryTeamId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(42, 6459650309448698702),
        relationTarget: 'DeliveryTeamModel',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(27, 3760358077954491990),
        name: 'token',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 2437256378976969932),
    name: 'ChecklistEntity',
    lastPropertyId: const obx_int.IdUid(7, 94474667100763187),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4477987743165216934),
        name: 'dbId',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 3931591266541154713),
        name: 'id',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5867174164226154781),
        name: 'objectName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 522061422086891091),
        name: 'isChecked',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 4434074810226791799),
        name: 'status',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 8940432436861085673),
        name: 'timeCompleted',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 94474667100763187),
        name: 'tripId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(41, 5008797146945500630),
        relationTarget: 'TripModel',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 1642281493645422089),
    name: 'ChecklistModel',
    lastPropertyId: const obx_int.IdUid(9, 3579455420369730652),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 8031641174212398977),
        name: 'objectBoxId',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 2912809523573672447),
        name: 'tripId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 4133133059971107355),
        name: 'pocketBaseId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 3579455420369730652),
        name: 'isChecked',
        type: 1,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(4, 2810982542403258041),
    name: 'CustomerEntity',
    lastPropertyId: const obx_int.IdUid(26, 4657750512920984701),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6236750458352047417),
        name: 'dbId',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 3253882744375541347),
        name: 'id',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 8135099039353923812),
        name: 'collectionId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 3381536243504511229),
        name: 'collectionName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 45105488215685205),
        name: 'deliveryNumber',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 1018357521837095445),
        name: 'storeName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 4087694502081403835),
        name: 'ownerName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 6474825060915434468),
        name: 'contactNumber',
        type: 30,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 7363645517555672052),
        name: 'address',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 5420239464119476058),
        name: 'municipality',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 7303160245840236974),
        name: 'province',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 8812957164445977657),
        name: 'modeOfPayment',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 1045020115845912295),
        name: 'numberOfInvoices',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 6043937121149023227),
        name: 'totalAmount',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(15, 5866289250807945815),
        name: 'latitude',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(16, 4473423505279939315),
        name: 'longitude',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(17, 8091191658113377414),
        name: 'created',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(18, 5143026906601448759),
        name: 'updated',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(20, 111157491964795591),
        name: 'tripId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(14, 5563374066333098899),
        relationTarget: 'TripModel',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(21, 886845633227859065),
        name: 'totalTime',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(22, 7862959537730988789),
        name: 'notes',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(23, 3792298513174971000),
        name: 'remarks',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(24, 1369727991867701382),
        name: 'modeOfPaymentString',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(25, 7602950538999883170),
        name: 'hasNotes',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(26, 4657750512920984701),
        name: 'confirmedTotalPayment',
        type: 8,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(1, 8779473196909793697),
        name: 'deliveryStatus',
        targetId: const obx_int.IdUid(7, 743757926875478403),
      ),
      obx_int.ModelRelation(
        id: const obx_int.IdUid(2, 922216345611620116),
        name: 'invoices',
        targetId: const obx_int.IdUid(9, 813909493096520087),
      ),
      obx_int.ModelRelation(
        id: const obx_int.IdUid(30, 8202552290369841474),
        name: 'transactions',
        targetId: const obx_int.IdUid(27, 2117216250781186987),
      ),
      obx_int.ModelRelation(
        id: const obx_int.IdUid(31, 3702142740189023932),
        name: 'returns',
        targetId: const obx_int.IdUid(31, 2222338414731561434),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(5, 6624942406754561090),
    name: 'CustomerModel',
    lastPropertyId: const obx_int.IdUid(21, 4804241814732810859),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(19, 4765256920943358881),
        name: 'objectBoxId',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(20, 5957476963308025203),
        name: 'pocketbaseId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(21, 4804241814732810859),
        name: 'tripId',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(6, 3030380395827557545),
    name: 'DeliveryUpdateEntity',
    lastPropertyId: const obx_int.IdUid(14, 9207743476254050728),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 2872014589800890025),
        name: 'dbId',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4510343960395030145),
        name: 'id',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 1963893039403240492),
        name: 'collectionId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 1149887436990373064),
        name: 'collectionName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 6023778725503830578),
        name: 'title',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 3389140036369585595),
        name: 'subtitle',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 3751266713506871109),
        name: 'time',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 9210493944751373739),
        name: 'created',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 7534054163778508981),
        name: 'updated',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 4301795890561203656),
        name: 'customer',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 339301082955252596),
        name: 'isAssigned',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 2514652108917566499),
        name: 'assignedTo',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 4125497972464191773),
        name: 'image',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 9207743476254050728),
        name: 'remarks',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(22, 7951814181348982632),
        name: 'customers',
        targetId: const obx_int.IdUid(5, 6624942406754561090),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(7, 743757926875478403),
    name: 'DeliveryUpdateModel',
    lastPropertyId: const obx_int.IdUid(15, 3835893324442889868),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 3125113937303846028),
        name: 'objectBoxId',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 2390634401853740969),
        name: 'pocketbaseId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(15, 3835893324442889868),
        name: 'customer',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(8, 5432582490327826448),
    name: 'InvoiceEntity',
    lastPropertyId: const obx_int.IdUid(15, 8426379740425083318),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6558666286453278682),
        name: 'dbId',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7391864432468285792),
        name: 'id',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 4991381980770158838),
        name: 'collectionId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 4848981102286286916),
        name: 'collectionName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 2252812235607604872),
        name: 'invoiceNumber',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 925197155801949221),
        name: 'created',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 7358673056707796553),
        name: 'updated',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 2829182731243011253),
        name: 'customerDeliveryStatus',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 6951871397512140651),
        name: 'totalAmount',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 6129570854454915775),
        name: 'confirmTotalAmount',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 7137774916926280362),
        name: 'customerId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(37, 8029204984159471890),
        relationTarget: 'CustomerModel',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 7923803019541041321),
        name: 'tripId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(38, 8621180843396620500),
        relationTarget: 'TripModel',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(15, 8426379740425083318),
        name: 'isCompleted',
        type: 1,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(5, 532223988813386682),
        name: 'productList',
        targetId: const obx_int.IdUid(13, 6887281950365048680),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(9, 813909493096520087),
    name: 'InvoiceModel',
    lastPropertyId: const obx_int.IdUid(22, 2801144532307129762),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 296532642051237585),
        name: 'objectBoxId',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 7335564331495633789),
        name: 'pocketbaseId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(21, 7126038900417777501),
        name: 'customerId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(22, 2801144532307129762),
        name: 'tripId',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(10, 4782152680528557896),
    name: 'PersonelEntity',
    lastPropertyId: const obx_int.IdUid(9, 3565892398588450264),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 9166391245504139454),
        name: 'dbId',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6959278537002403254),
        name: 'id',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3895615444469194375),
        name: 'collectionId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 7572438726892229144),
        name: 'collectionName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 7181989841462903246),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 6400523452675398463),
        name: 'created',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 3981896081873859853),
        name: 'updated',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 4464013545579720312),
        name: 'deliveryTeamId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(31, 7728192773003880619),
        relationTarget: 'DeliveryTeamModel',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 3565892398588450264),
        name: 'tripId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(32, 2725745165475775246),
        relationTarget: 'TripModel',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(11, 6114492281946439458),
    name: 'PersonelModel',
    lastPropertyId: const obx_int.IdUid(11, 4587561234129879826),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 4348728843700536428),
        name: 'objectBoxId',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 6965507140557150922),
        name: 'pocketbaseId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 3968780198185668754),
        name: 'tripId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 4587561234129879826),
        name: 'deliveryTeamId',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(12, 2593343718872205124),
    name: 'ProductEntity',
    lastPropertyId: const obx_int.IdUid(48, 8186774332665517874),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6325828076300386899),
        name: 'dbId',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 270983248864754213),
        name: 'id',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 6409336372386458699),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 5169533415623584624),
        name: 'description',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 6497842107553043055),
        name: 'image',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(21, 7636815526717123652),
        name: 'pricePerPc',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(26, 6515989377128153678),
        name: 'totalAmount',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(27, 634443315658693490),
        name: 'pricePerCase',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(29, 4194123572114620536),
        name: 'invoiceId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(35, 5194934914905270370),
        relationTarget: 'InvoiceModel',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(30, 851112904590827220),
        name: 'customerId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(36, 4755378348514881247),
        relationTarget: 'CustomerModel',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(31, 8986910532050463210),
        name: 'isCase',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(32, 9125521959038870111),
        name: 'isPc',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(33, 2770902239759775903),
        name: 'isPack',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(34, 4443279738750832096),
        name: 'isBox',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(35, 5221032146910871289),
        name: 'unloadedProductCase',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(36, 2663816627981708346),
        name: 'unloadedProductPc',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(37, 3725358458194100352),
        name: 'unloadedProductPack',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(38, 2277412749602805915),
        name: 'unloadedProductBox',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(44, 6433142257288463011),
        name: 'case_',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(45, 7600171264578283543),
        name: 'pcs',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(46, 7302890908149584229),
        name: 'pack',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(47, 4526406225289741230),
        name: 'box',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(48, 8186774332665517874),
        name: 'hasReturn',
        type: 1,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(13, 6887281950365048680),
    name: 'ProductModel',
    lastPropertyId: const obx_int.IdUid(17, 2509549930219347946),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 344950642817430532),
        name: 'pocketbaseId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(15, 1827036462628612368),
        name: 'objectBoxId',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(16, 596861409252080956),
        name: 'invoiceId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(17, 2509549930219347946),
        name: 'customerId',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(14, 4634356157032572206),
    name: 'TripEntity',
    lastPropertyId: const obx_int.IdUid(21, 4551943407444772877),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8331655926247374688),
        name: 'dbId',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 311333714104891901),
        name: 'id',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 6239376025946591758),
        name: 'collectionId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 8017420667308803322),
        name: 'collectionName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 8763390681432738921),
        name: 'tripNumberId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 8055234233253314331),
        name: 'timelineId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(3, 9101044710165158669),
        relationTarget: 'UpdateTimelineModel',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 8715294592410334777),
        name: 'isAccepted',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 3711484348110405773),
        name: 'created',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 1628851151417726000),
        name: 'updated',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 8071478128879828670),
        name: 'timeAccepted',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 6882837936944343347),
        name: 'deliveryTeamId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(23, 5349887073563019195),
        relationTarget: 'DeliveryTeamModel',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 6887230557996274240),
        name: 'otpId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(29, 7549525326544430329),
        relationTarget: 'OtpModel',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 8136254872264618090),
        name: 'endTripOtpId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(30, 8999944981528090819),
        relationTarget: 'EndTripOtpModel',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(15, 4941899855765488894),
        name: 'isEndTrip',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(16, 6727132840220338073),
        name: 'timeEndTrip',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(17, 6531624176651104398),
        name: 'totalTripDistance',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(18, 7411264566326524894),
        name: 'qrCode',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(19, 7919928115341683040),
        name: 'userId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(43, 531173930812991960),
        relationTarget: 'LocalUsersModel',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(20, 5613982689448357445),
        name: 'latitude',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(21, 4551943407444772877),
        name: 'longitude',
        type: 8,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(7, 4643822862643184357),
        name: 'customers',
        targetId: const obx_int.IdUid(5, 6624942406754561090),
      ),
      obx_int.ModelRelation(
        id: const obx_int.IdUid(8, 3785961766489236590),
        name: 'personels',
        targetId: const obx_int.IdUid(11, 6114492281946439458),
      ),
      obx_int.ModelRelation(
        id: const obx_int.IdUid(9, 1839302727849658408),
        name: 'checklist',
        targetId: const obx_int.IdUid(3, 1642281493645422089),
      ),
      obx_int.ModelRelation(
        id: const obx_int.IdUid(19, 9059256670982983459),
        name: 'vehicle',
        targetId: const obx_int.IdUid(19, 2221868557555259792),
      ),
      obx_int.ModelRelation(
        id: const obx_int.IdUid(37, 8009148045859773887),
        name: 'completedCustomers',
        targetId: const obx_int.IdUid(32, 5190367765380256665),
      ),
      obx_int.ModelRelation(
        id: const obx_int.IdUid(38, 7971742671112932770),
        name: 'returns',
        targetId: const obx_int.IdUid(31, 2222338414731561434),
      ),
      obx_int.ModelRelation(
        id: const obx_int.IdUid(39, 2312004636728150997),
        name: 'undeliverableCustomers',
        targetId: const obx_int.IdUid(41, 1498007900983199816),
      ),
      obx_int.ModelRelation(
        id: const obx_int.IdUid(40, 863808831836037207),
        name: 'transactions',
        targetId: const obx_int.IdUid(27, 2117216250781186987),
      ),
      obx_int.ModelRelation(
        id: const obx_int.IdUid(41, 1790612701283068757),
        name: 'endTripChecklist',
        targetId: const obx_int.IdUid(43, 2966284262887622250),
      ),
      obx_int.ModelRelation(
        id: const obx_int.IdUid(43, 6298771103393394809),
        name: 'tripUpdates',
        targetId: const obx_int.IdUid(48, 8340272642715376828),
      ),
      obx_int.ModelRelation(
        id: const obx_int.IdUid(44, 4081384640078222274),
        name: 'invoices',
        targetId: const obx_int.IdUid(9, 813909493096520087),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(15, 8914728044268258781),
    name: 'TripModel',
    lastPropertyId: const obx_int.IdUid(12, 1234570302468668782),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 2912521654645147918),
        name: 'objectBoxId',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 1234570302468668782),
        name: 'pocketbaseId',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(16, 937918581849543207),
    name: 'UpdateTimelineEntity',
    lastPropertyId: const obx_int.IdUid(6, 4163351549138731239),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6186365132359912635),
        name: 'dbId',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4172421423966186718),
        name: 'id',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 6325676081482135511),
        name: 'collectionId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 2950505108334920364),
        name: 'collectionName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 2894228457296743553),
        name: 'created',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 4163351549138731239),
        name: 'updated',
        type: 10,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(17, 2516527742303567496),
    name: 'UpdateTimelineModel',
    lastPropertyId: const obx_int.IdUid(6, 8422213836280040162),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7543617251530756104),
        name: 'dbId',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 5654570394661900185),
        name: 'id',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 4054983847623094980),
        name: 'collectionId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 1542758854891727305),
        name: 'collectionName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 8118348817022776716),
        name: 'created',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 8422213836280040162),
        name: 'updated',
        type: 10,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(18, 4333057689990297160),
    name: 'VehicleEntity',
    lastPropertyId: const obx_int.IdUid(11, 5008752805959440831),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3184061274569432270),
        name: 'dbId',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 8057469913794903815),
        name: 'id',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5310961405297681090),
        name: 'collectionId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 1492033224014375763),
        name: 'collectionName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 8128311458033104675),
        name: 'vehicleName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 4371168023259649949),
        name: 'vehiclePlateNumber',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 5356208287296348895),
        name: 'vehicleType',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 1619972481835330093),
        name: 'created',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 6590600448549686068),
        name: 'updated',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 8532757649039017378),
        name: 'deliveryTeamId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(33, 7879931348105043187),
        relationTarget: 'DeliveryTeamModel',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 5008752805959440831),
        name: 'tripId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(34, 8207050717615641471),
        relationTarget: 'TripModel',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(19, 2221868557555259792),
    name: 'VehicleModel',
    lastPropertyId: const obx_int.IdUid(13, 4239136672454108126),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 470859633088862700),
        name: 'objectBoxId',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 8310058358750134313),
        name: 'pocketbaseId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 474734031823528984),
        name: 'tripId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 4239136672454108126),
        name: 'deliveryTeamId',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(20, 3827618117737923097),
    name: 'DeliveryTeamEntity',
    lastPropertyId: const obx_int.IdUid(13, 8165478066265954911),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4021125925690014592),
        name: 'dbId',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 1728716429982816714),
        name: 'id',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3955318567771985141),
        name: 'collectionId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 7450810517738687855),
        name: 'collectionName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 299598900691912166),
        name: 'activeDeliveries',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 3634252224675327345),
        name: 'totalDelivered',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 3353116449410246463),
        name: 'totalDistanceTravelled',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 6255876164463889503),
        name: 'created',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 423417278038742725),
        name: 'updated',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 1773645114622699408),
        name: 'undeliveredCustomers',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 8165478066265954911),
        name: 'tripId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(21, 830914855730843355),
        relationTarget: 'TripModel',
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(13, 8061470341385443398),
        name: 'personels',
        targetId: const obx_int.IdUid(11, 6114492281946439458),
      ),
      obx_int.ModelRelation(
        id: const obx_int.IdUid(14, 7896462966271049217),
        name: 'checklist',
        targetId: const obx_int.IdUid(3, 1642281493645422089),
      ),
      obx_int.ModelRelation(
        id: const obx_int.IdUid(20, 3677489048848750233),
        name: 'vehicle',
        targetId: const obx_int.IdUid(19, 2221868557555259792),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(24, 643024459725978300),
    name: 'OtpModel',
    lastPropertyId: const obx_int.IdUid(9, 7211628598320049830),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4557798915105780545),
        name: 'dbId',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 9140415642245004041),
        name: 'id',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5514683999879237980),
        name: 'otpCode',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 1203840555742406130),
        name: 'generatedCode',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 943925897027227969),
        name: 'isVerified',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 4141566973643536495),
        name: 'createdAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 4004611392860737254),
        name: 'expiresAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 799240029127897019),
        name: 'verifiedAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 7211628598320049830),
        name: 'tripId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(26, 7657596910129447497),
        relationTarget: 'TripModel',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(25, 1636938665827161760),
    name: 'TransactionEntity',
    lastPropertyId: const obx_int.IdUid(19, 8186513145024983979),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7788696190495463391),
        name: 'dbId',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 1182637436290937352),
        name: 'id',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3185695397029916180),
        name: 'collectionId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 7482434781887082599),
        name: 'collectionName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 7547398494399669109),
        name: 'customerName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 9212230789388552615),
        name: 'totalAmount',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 4849920256823204710),
        name: 'deliveryNumber',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 6341109722109625035),
        name: 'transactionDate',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 5524543240484184771),
        name: 'createdAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 510632936006348073),
        name: 'updatedAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 2236155664072012998),
        name: 'isCompleted',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 2935231896130179601),
        name: 'transactionStatusString',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 3913111527420347263),
        name: 'modeOfPaymentString',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(15, 3851258104500491561),
        name: 'customerImage',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(16, 7955364885727961290),
        name: 'refNumber',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(17, 2221253742651843905),
        name: 'tripRefId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(17, 472954893477498029),
        relationTarget: 'TripModel',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(18, 8974145915940495565),
        name: 'completedCustomerRefId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(20, 4280167080029899625),
        relationTarget: 'CompletedCustomerModel',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(19, 8186513145024983979),
        name: 'customerId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(39, 811078952087890952),
        relationTarget: 'CustomerModel',
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(15, 1605353635090230975),
        name: 'invoices',
        targetId: const obx_int.IdUid(8, 5432582490327826448),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(27, 2117216250781186987),
    name: 'TransactionModel',
    lastPropertyId: const obx_int.IdUid(26, 8768302685213339695),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(17, 4369489657167608582),
        name: 'objectBoxId',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(18, 8222082613003819562),
        name: 'pocketbaseId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(23, 3440119017008134938),
        name: 'customerId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(24, 7240213920209634204),
        name: 'tripId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(25, 5225197093163286518),
        name: 'completedCustomerId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(26, 8768302685213339695),
        name: 'transactionDate',
        type: 10,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(28, 7427438328308874200),
    name: 'LocalUsersModel',
    lastPropertyId: const obx_int.IdUid(26, 3147787524653339424),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(22, 7118967602015234264),
        name: 'objectBoxId',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(23, 8503047217667845871),
        name: 'pocketbaseId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(24, 7551472861255514630),
        name: 'tripId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(25, 819799394032496594),
        name: 'deliveryTeamId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(26, 3147787524653339424),
        name: 'token',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(29, 5712654757194167079),
    name: 'DeliveryTeamModel',
    lastPropertyId: const obx_int.IdUid(3, 3552847195292051829),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 2313676663934023492),
        name: 'objectBoxId',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6857897770363156194),
        name: 'pocketbaseId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3552847195292051829),
        name: 'tripId',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(30, 8325197092071778196),
    name: 'ReturnEntity',
    lastPropertyId: const obx_int.IdUid(23, 5029006026594443824),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7159250174630514347),
        name: 'dbId',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 688633321144220225),
        name: 'id',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 7712354582157774445),
        name: 'collectionId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 20699139691494007),
        name: 'collectionName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 3257272905913404798),
        name: 'productName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 5966119542570929601),
        name: 'productDescription',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 2054820229075353456),
        name: 'returnDate',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 1354780863573015275),
        name: 'productQuantityCase',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 8352136082830244547),
        name: 'productQuantityPcs',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(15, 6308530438112771624),
        name: 'invoiceRefId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(12, 7060883924692009282),
        relationTarget: 'InvoiceModel',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(16, 5654710875855817213),
        name: 'customerRefId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(13, 8405295962581646686),
        relationTarget: 'CustomerModel',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(17, 1442767062996121287),
        name: 'tripRefId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(16, 4776033954590063152),
        relationTarget: 'TripModel',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(18, 2616114769091067229),
        name: 'productQuantityPack',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(19, 2978713147213114232),
        name: 'productQuantityBox',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(20, 7733948270425816243),
        name: 'isCase',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(21, 6096513534413029008),
        name: 'isPcs',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(22, 6909169449759179596),
        name: 'isBox',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(23, 5029006026594443824),
        name: 'isPack',
        type: 1,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(31, 2222338414731561434),
    name: 'ReturnModel',
    lastPropertyId: const obx_int.IdUid(4, 4292325636304599832),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3149737445133335124),
        name: 'objectBoxId',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 3285981560810214996),
        name: 'pocketbaseId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 4292325636304599832),
        name: 'tripId',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(32, 5190367765380256665),
    name: 'CompletedCustomerModel',
    lastPropertyId: const obx_int.IdUid(4, 9163101723595439190),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6509687678033297242),
        name: 'objectBoxId',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 2428300827424217746),
        name: 'pocketbaseId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 6459952616228590918),
        name: 'tripId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 9163101723595439190),
        name: 'timeCompleted',
        type: 10,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(33, 4702232932726113116),
    name: 'CompletedCustomerEntity',
    lastPropertyId: const obx_int.IdUid(19, 8356014716741193452),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 2081631122263565441),
        name: 'dbId',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6006406697334212765),
        name: 'id',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 267814120063409867),
        name: 'collectionId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 7905683759712683842),
        name: 'collectionName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 6807520937482742362),
        name: 'deliveryNumber',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 8207918602700888103),
        name: 'storeName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 8018805169024900810),
        name: 'ownerName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 9024996737942869157),
        name: 'contactNumber',
        type: 30,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 7516508171733807906),
        name: 'address',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 4405439017711572684),
        name: 'municipality',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 2391120462549753352),
        name: 'province',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 1281672098929982405),
        name: 'modeOfPayment',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 9183796705152472307),
        name: 'timeCompleted',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 2781752260426345470),
        name: 'totalAmount',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(15, 5450074392613403862),
        name: 'transactionRefId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(10, 5243635373610734763),
        relationTarget: 'TransactionModel',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(16, 2373140102148991748),
        name: 'customerRefId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(11, 4985843839591153857),
        relationTarget: 'CustomerModel',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(17, 5224150141613133736),
        name: 'tripId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(15, 6669930884800093869),
        relationTarget: 'TripModel',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(18, 655879933433011631),
        name: 'totalTime',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(19, 8356014716741193452),
        name: 'modeOfPaymentString',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(24, 6324992454358673680),
        name: 'invoices',
        targetId: const obx_int.IdUid(9, 813909493096520087),
      ),
      obx_int.ModelRelation(
        id: const obx_int.IdUid(25, 5191412171099240435),
        name: 'deliveryStatus',
        targetId: const obx_int.IdUid(7, 743757926875478403),
      ),
      obx_int.ModelRelation(
        id: const obx_int.IdUid(28, 6472482075989076832),
        name: 'returns',
        targetId: const obx_int.IdUid(31, 2222338414731561434),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(41, 1498007900983199816),
    name: 'UndeliverableCustomerModel',
    lastPropertyId: const obx_int.IdUid(4, 3603718351566598495),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4853744715588708487),
        name: 'objectBoxId',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4489963106830340807),
        name: 'pocketbaseId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 131988642879265621),
        name: 'tripId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 3603718351566598495),
        name: 'customerId',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(42, 792996251176618181),
    name: 'EndChecklistEntity',
    lastPropertyId: const obx_int.IdUid(7, 4872620912309772707),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 993407976825458506),
        name: 'dbId',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6180605324378926902),
        name: 'id',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3635790849741874685),
        name: 'objectName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 7246786467333471832),
        name: 'isChecked',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 2192373627021538263),
        name: 'status',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 777439657364217530),
        name: 'timeCompleted',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 4872620912309772707),
        name: 'trip',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(43, 2966284262887622250),
    name: 'EndTripChecklistModel',
    lastPropertyId: const obx_int.IdUid(6, 6987941804636964193),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4688045235485403187),
        name: 'dbId',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 2497662157408653586),
        name: 'id',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5234942605294889225),
        name: 'objectName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 6497557161687300793),
        name: 'isChecked',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 4806679431450460278),
        name: 'status',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 6987941804636964193),
        name: 'trip',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(46, 8984387025797531191),
    name: 'UndeliverableCustomerEntity',
    lastPropertyId: const obx_int.IdUid(18, 7910129559602669704),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8685509533717266954),
        name: 'dbId',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 2608369877185797316),
        name: 'id',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 7603402449542992811),
        name: 'collectionId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 3709584509802714636),
        name: 'collectionName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 4281595992971248849),
        name: 'deliveryNumber',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 7986841945518961124),
        name: 'storeName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 8596900298846992208),
        name: 'ownerName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 1136157881071497442),
        name: 'contactNumber',
        type: 30,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 7242929660127407819),
        name: 'address',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 6785323552713586580),
        name: 'municipality',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 2088534606867845567),
        name: 'province',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 1174106696378544901),
        name: 'modeOfPayment',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 4901481522986122322),
        name: 'time',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 2944343869770818756),
        name: 'created',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(15, 7739883618297448780),
        name: 'updated',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(16, 2492853829283906299),
        name: 'customerImage',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(17, 7323883443322035507),
        name: 'customerRefId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(18, 7731158962080929526),
        relationTarget: 'CustomerModel',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(18, 7910129559602669704),
        name: 'tripRefId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(19, 6029004681799113222),
        relationTarget: 'TripModel',
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(42, 3258354676529996076),
        name: 'invoices',
        targetId: const obx_int.IdUid(9, 813909493096520087),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(47, 3525944426048839466),
    name: 'TripUpdateEntity',
    lastPropertyId: const obx_int.IdUid(10, 352449712989912343),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4901701440858827615),
        name: 'dbId',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4385970042061235222),
        name: 'id',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5439995069398349660),
        name: 'collectionId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 8617933621496379187),
        name: 'collectionName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 7617129892896370951),
        name: 'date',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 1986567278734983987),
        name: 'image',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 2301721007510007266),
        name: 'description',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 8315970559949902738),
        name: 'latitude',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 1509613113570699495),
        name: 'longitude',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 352449712989912343),
        name: 'tripId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(24, 4860185457431415277),
        relationTarget: 'TripModel',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(48, 8340272642715376828),
    name: 'TripUpdateModel',
    lastPropertyId: const obx_int.IdUid(3, 5159939301141199792),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3339049301227088481),
        name: 'objectBoxId',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 2519476872926955778),
        name: 'pocketbaseId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5159939301141199792),
        name: 'tripId',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(49, 1131722236529943803),
    name: 'EndTripOtpModel',
    lastPropertyId: const obx_int.IdUid(9, 450557366528971416),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 2153301131389480900),
        name: 'dbId',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 3501068772274110439),
        name: 'id',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 6593792952443977985),
        name: 'otpCode',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 3824144617639256991),
        name: 'generatedCode',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 5319112439839724392),
        name: 'isVerified',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 5017239233748648122),
        name: 'createdAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 8556722920323910051),
        name: 'expiresAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 6054709776274326083),
        name: 'verifiedAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 450557366528971416),
        name: 'tripId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(47, 6079813195697612926),
        relationTarget: 'TripModel',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(50, 5941042707820935484),
    name: 'EndTripOtpEntity',
    lastPropertyId: const obx_int.IdUid(10, 4110476614063380959),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3448734606175245413),
        name: 'dbId',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4938343817719946011),
        name: 'id',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 6081123548549574525),
        name: 'otpCode',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 5487622200613296526),
        name: 'generatedCode',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 894217468241371721),
        name: 'isVerified',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 3845387719778105177),
        name: 'createdAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 7537857964352029569),
        name: 'expiresAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 6676027769759253249),
        name: 'verifiedAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 14288157266564761),
        name: 'tripId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(27, 6013288350372582445),
        relationTarget: 'TripModel',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 4110476614063380959),
        name: 'endTripOdometer',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(51, 644365920268088622),
    name: 'OtpEntity',
    lastPropertyId: const obx_int.IdUid(10, 5622219702744553453),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6582525345214236852),
        name: 'dbId',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 2845022542673206518),
        name: 'id',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2921851186473326785),
        name: 'otpCode',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 8882587011533747056),
        name: 'generatedCode',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 5576716717786791508),
        name: 'isVerified',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 4782956038354887062),
        name: 'createdAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 3028890394502713668),
        name: 'expiresAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 5022640461465373847),
        name: 'verifiedAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 1142875064865309875),
        name: 'tripId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(28, 1576209480408598494),
        relationTarget: 'TripModel',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 5622219702744553453),
        name: 'intransitOdometer',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(51, 644365920268088622),
    lastIndexId: const obx_int.IdUid(47, 6079813195697612926),
    lastRelationId: const obx_int.IdUid(44, 4081384640078222274),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [
      1709191995835174192,
      5647878385979291019,
      6731247264778152736,
      2458712594399542542,
      3107077524193027026,
      5955780460900690118,
      8194473631824528840,
      116420218591968259,
      1767132873335522797,
      2135318920905868119,
      572117866772752744,
      1402609585364815748,
      7120148567131405051,
    ],
    retiredIndexUids: const [
      2981830705100883060,
      2782803977680333148,
      6300437396902348039,
      4041501902131753704,
      8777982949646307272,
      7024515020805388727,
      5590631857740543101,
      5824002030703593085,
      935312474712296861,
      4446192239018063099,
      1394205174110905009,
      899601815778169880,
    ],
    retiredPropertyUids: const [
      3346502891055187729,
      1009332994863935659,
      2324303722038017820,
      7788635126355027900,
      7334760455591202468,
      8381667705519424013,
      2710477333633267407,
      3055896665825880636,
      4678345076338164646,
      7001435660534463531,
      3371026510439087837,
      5329373544729784361,
      3324814194881990742,
      7899912214650689887,
      3520683897252299998,
      5756124573361889393,
      4736890772351912530,
      1556138099246924859,
      5777588314242894772,
      1515482504621780335,
      6695954596118044804,
      4688492044640008953,
      7864172107054097804,
      153098866840512948,
      1017756023256924244,
      733073798972306696,
      8649563819024543426,
      5026498849414778679,
      4923944400873830152,
      8964901702785174985,
      2591008408372236149,
      2833951936164225068,
      3105786280374445439,
      3234456093933637888,
      623759477716576776,
      5884932740389322811,
      1499446022435534747,
      9049041803453357739,
      2896878176954484620,
      4674086858133167844,
      6635358543995513750,
      2057975570452214727,
      6696659810550947331,
      2673370692750713040,
      2452258425451218631,
      1660829942871227289,
      2481549374181021520,
      2647248119636072139,
      3123785702483572634,
      7708327547631968643,
      6986507959279631750,
      6854176634043208467,
      636066565857395264,
      7514130931921951299,
      956767886241436992,
      9059613739051651735,
      3954239300359103519,
      8456539975188843360,
      7855429121177003935,
      3814657222248468385,
      118867138343753619,
      3617129722980667683,
      6100680245733313644,
      3988289524928837905,
      7220003368912499423,
      7591981076327796786,
      6865162061090837420,
      874109652006675219,
      3307256693058695743,
      8689131560753511824,
      7383993059172374117,
      1555406793455982899,
      6714374928200089591,
      3042412625847487470,
      3123422852844259364,
      7266098996974810707,
      6886073076169604887,
      3429347792345719564,
      9131168568839693837,
      4670377013173472518,
      6194329686129516474,
      8211050437118544391,
      6926303013006571764,
      1181701315522890829,
      6912351668832820101,
      4960961578336605968,
      5792604516464607618,
      4905934325953802439,
      2586529332979243720,
      5861714207120707011,
      1873158772802680681,
      5084572190381757332,
      7748044255256174871,
      7972348241275475002,
      1261572913212912961,
      6761708035171457004,
      2634043966613139471,
      7720841438373947280,
      6206971940003050337,
      7542721183222484098,
      155822766592974440,
      8496483455969129505,
      2178731346099788232,
      6221411334446485428,
      2051736087611920237,
      8091250733894021936,
      8424877247173309892,
      5936290088340059749,
      3401469890485481111,
      90345078465889098,
      8570110506833708183,
      9152837453747261590,
      6280043272279039033,
      1205345670970589924,
      7329503767436942265,
      2089832183961038400,
      4900112148274986884,
      5057066566090903305,
      3852867156292370197,
      2620484594183047470,
      1779482180990046958,
      5774607245411278659,
      5530847620210540319,
      3650136383948829499,
      6750117226059744954,
      8256360511733442188,
      3442425869725346823,
      6653769136411455134,
      5232249076290523924,
      5114193768578248515,
      869744572143142212,
      7966901206049272756,
      6761636637536665936,
      6066451446905563522,
      3666705536834561833,
      7294019686697303616,
      2568272940799886390,
      8668470884968752331,
      3017993733987945649,
      1642277713169861702,
      6846417587262951599,
      3248218099750963756,
      1687518482051146126,
      4092268054658678507,
      4679455853066371887,
      7193871567497624824,
      4037163148147848591,
      471256164172782859,
      3225561053691562279,
      8728538038950971971,
      7266365344229709032,
      7508193386524436699,
      2767468891706791322,
      1774270480587178987,
      1202246538480569000,
      3223422758391311674,
      6435739894853343272,
      3374035810299161816,
      9107479157367655135,
      267960583653816918,
      2633421765705684186,
      262455484447700793,
      3631673552392912539,
      1845631243407067851,
      8608845737309140413,
      4956262906346606043,
      5292948896455438928,
      2430809978846032528,
      7735096263462153087,
      6335579363066827439,
      4882081437172580607,
      3061032585647135624,
      2554901496995892810,
      8786142205816397975,
      8174398557175301547,
      4326647970592138593,
      7347651946967189121,
      2038198061276200161,
      5022564998890878109,
      3305357813724603285,
      5127278744056458213,
      8434655857806917917,
      4818737849281510032,
      1017119108737096578,
      5575952014722064126,
      4588130528760471343,
      8255311086692512601,
      8475649867718060193,
      4909422161419561195,
      493693054723217232,
      6075804939639433975,
      9148555850270000235,
      1734468122192002532,
      8712156239102596010,
      7019605952068996319,
      2947252145267312157,
      9086207744144734969,
      256582326921748728,
      1308393457313955946,
      5331664432725031139,
      4940556951321025223,
      5578967840659667487,
      1273653736147391768,
      5964088283253944682,
      7561021174642281097,
      4633115773106761011,
      2156627673242474335,
      621575398230288989,
      2839846883970833567,
      8138372410520429987,
      8497769358559599242,
      6683516220717541421,
      753938509431198301,
      5115470052619938283,
      2407621401099227263,
      5645589271456974710,
      3943047939382892239,
      4819292598439533012,
      81471854687097645,
      2894727471067594752,
      5841964243118193692,
      5708406590959690661,
      6209956281521035556,
      8824375292511182769,
      3002616149896201006,
      6876487194760412825,
      7179125411577599663,
      9218304528965443174,
      5053188798423684984,
      6365039277670865476,
      6521198168162998790,
      1849011463706792379,
      1222961001376872913,
      6623588558235138825,
      4797487283297426094,
      3274716364988500121,
      7500813721015562269,
      2016412316382749069,
      4617807091484509180,
      1664638640866434715,
      1310607178100257051,
      2751010279870765211,
      4249800905296480194,
      2541656314562760752,
      9183558434272641539,
      527796475590680333,
      7366984776947846670,
      3914332514906635095,
      1899462517382426399,
      6935080176359632810,
      8910130772582302120,
      8927908042961978708,
      5721957865069607072,
      6322027692736321227,
      9216643524753605112,
      6710299430894799167,
      6210998683546887611,
      6894276842539030329,
      4133114395883755979,
      105319028927879718,
      4191316215346017706,
      4989933997621522724,
      6686536332549314011,
      4839088005258446305,
      6406352966592152370,
      4647964431685183452,
      7398992804350638175,
      8502432387044699617,
      8789905355408153954,
      1449615058738359455,
      4880751019398108216,
      7919008357053089198,
      1905456188826770252,
      3193306949989739351,
      7915277020131883841,
      3874592165834909809,
      2254359110924808111,
      7465490325345930004,
      2015172529944872494,
      8543318595254771691,
      1864920782530861828,
      4522413966018009944,
      8797962648914788389,
      6900674462289497262,
      2265347942980778690,
      1159071939057965804,
      1930353276913245788,
      495942872694066139,
      302180669176230366,
      353255264519052879,
      8635794056678148942,
    ],
    retiredRelationUids: const [
      4626963580022962752,
      7952964050811186203,
      2572761830930501922,
      5657459460448516614,
      8176844965992326068,
      1966879051449128539,
      4390911173969797425,
      7705048988162586471,
      4036520657680791832,
      964408522493268961,
      4702156903672996872,
      3629441164168392802,
      768856214699475907,
      520418666464514115,
      1587644881745869281,
      2271626364931710282,
      9194901586609090214,
      5055001292096896164,
    ],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    LocalUser: obx_int.EntityDefinition<LocalUser>(
      model: _entities[0],
      toOneRelations: (LocalUser object) => [object.trip, object.deliveryTeam],
      toManyRelations: (LocalUser object) => {},
      getId: (LocalUser object) => object.dbId,
      setId: (LocalUser object, int id) {
        object.dbId = id;
      },
      objectToFB: (LocalUser object, fb.Builder fbb) {
        final emailOffset =
            object.email == null ? null : fbb.writeString(object.email!);
        final profilePicOffset =
            object.profilePic == null
                ? null
                : fbb.writeString(object.profilePic!);
        final nameOffset =
            object.name == null ? null : fbb.writeString(object.name!);
        final tripNumberIdOffset =
            object.tripNumberId == null
                ? null
                : fbb.writeString(object.tripNumberId!);
        final idOffset = object.id == null ? null : fbb.writeString(object.id!);
        final collectionIdOffset =
            object.collectionId == null
                ? null
                : fbb.writeString(object.collectionId!);
        final collectionNameOffset =
            object.collectionName == null
                ? null
                : fbb.writeString(object.collectionName!);
        final tokenOffset =
            object.token == null ? null : fbb.writeString(object.token!);
        fbb.startTable(28);
        fbb.addInt64(0, object.dbId);
        fbb.addOffset(2, emailOffset);
        fbb.addOffset(3, profilePicOffset);
        fbb.addOffset(8, nameOffset);
        fbb.addOffset(9, tripNumberIdOffset);
        fbb.addOffset(21, idOffset);
        fbb.addOffset(22, collectionIdOffset);
        fbb.addOffset(23, collectionNameOffset);
        fbb.addInt64(24, object.trip.targetId);
        fbb.addInt64(25, object.deliveryTeam.targetId);
        fbb.addOffset(26, tokenOffset);
        fbb.finish(fbb.endTable());
        return object.dbId;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 46);
        final collectionIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 48);
        final collectionNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 50);
        final emailParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final profilePicParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 20);
        final tripNumberIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 22);
        final tokenParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 56);
        final object = LocalUser(
          id: idParam,
          collectionId: collectionIdParam,
          collectionName: collectionNameParam,
          email: emailParam,
          profilePic: profilePicParam,
          name: nameParam,
          tripNumberId: tripNumberIdParam,
          token: tokenParam,
        )..dbId = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        object.trip.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          52,
          0,
        );
        object.trip.attach(store);
        object.deliveryTeam.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          54,
          0,
        );
        object.deliveryTeam.attach(store);
        return object;
      },
    ),
    ChecklistEntity: obx_int.EntityDefinition<ChecklistEntity>(
      model: _entities[1],
      toOneRelations: (ChecklistEntity object) => [object.trip],
      toManyRelations: (ChecklistEntity object) => {},
      getId: (ChecklistEntity object) => object.dbId,
      setId: (ChecklistEntity object, int id) {
        object.dbId = id;
      },
      objectToFB: (ChecklistEntity object, fb.Builder fbb) {
        final idOffset = fbb.writeString(object.id);
        final objectNameOffset =
            object.objectName == null
                ? null
                : fbb.writeString(object.objectName!);
        final statusOffset =
            object.status == null ? null : fbb.writeString(object.status!);
        fbb.startTable(8);
        fbb.addInt64(0, object.dbId);
        fbb.addOffset(1, idOffset);
        fbb.addOffset(2, objectNameOffset);
        fbb.addBool(3, object.isChecked);
        fbb.addOffset(4, statusOffset);
        fbb.addInt64(5, object.timeCompleted?.millisecondsSinceEpoch);
        fbb.addInt64(6, object.trip.targetId);
        fbb.finish(fbb.endTable());
        return object.dbId;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final timeCompletedValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          14,
        );
        final idParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final objectNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final isCheckedParam = const fb.BoolReader().vTableGetNullable(
          buffer,
          rootOffset,
          10,
        );
        final statusParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final timeCompletedParam =
            timeCompletedValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(timeCompletedValue);
        final object = ChecklistEntity(
          id: idParam,
          objectName: objectNameParam,
          isChecked: isCheckedParam,
          status: statusParam,
          timeCompleted: timeCompletedParam,
        )..dbId = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        object.trip.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          16,
          0,
        );
        object.trip.attach(store);
        return object;
      },
    ),
    ChecklistModel: obx_int.EntityDefinition<ChecklistModel>(
      model: _entities[2],
      toOneRelations: (ChecklistModel object) => [],
      toManyRelations: (ChecklistModel object) => {},
      getId: (ChecklistModel object) => object.objectBoxId,
      setId: (ChecklistModel object, int id) {
        object.objectBoxId = id;
      },
      objectToFB: (ChecklistModel object, fb.Builder fbb) {
        final tripIdOffset =
            object.tripId == null ? null : fbb.writeString(object.tripId!);
        final pocketBaseIdOffset =
            object.pocketBaseId == null
                ? null
                : fbb.writeString(object.pocketBaseId!);
        fbb.startTable(10);
        fbb.addInt64(5, object.objectBoxId);
        fbb.addOffset(6, tripIdOffset);
        fbb.addOffset(7, pocketBaseIdOffset);
        fbb.addBool(8, object.isChecked);
        fbb.finish(fbb.endTable());
        return object.objectBoxId;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final isCheckedParam = const fb.BoolReader().vTableGetNullable(
          buffer,
          rootOffset,
          20,
        );
        final tripIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 16);
        final object =
            ChecklistModel(isChecked: isCheckedParam, tripId: tripIdParam)
              ..objectBoxId = const fb.Int64Reader().vTableGet(
                buffer,
                rootOffset,
                14,
                0,
              )
              ..pocketBaseId = const fb.StringReader(
                asciiOptimization: true,
              ).vTableGetNullable(buffer, rootOffset, 18);

        return object;
      },
    ),
    CustomerEntity: obx_int.EntityDefinition<CustomerEntity>(
      model: _entities[3],
      toOneRelations: (CustomerEntity object) => [object.trip],
      toManyRelations:
          (CustomerEntity object) => {
            obx_int.RelInfo<CustomerEntity>.toMany(1, object.dbId):
                object.deliveryStatus,
            obx_int.RelInfo<CustomerEntity>.toMany(2, object.dbId):
                object.invoices,
            obx_int.RelInfo<CustomerEntity>.toMany(30, object.dbId):
                object.transactions,
            obx_int.RelInfo<CustomerEntity>.toMany(31, object.dbId):
                object.returns,
          },
      getId: (CustomerEntity object) => object.dbId,
      setId: (CustomerEntity object, int id) {
        object.dbId = id;
      },
      objectToFB: (CustomerEntity object, fb.Builder fbb) {
        final idOffset = object.id == null ? null : fbb.writeString(object.id!);
        final collectionIdOffset =
            object.collectionId == null
                ? null
                : fbb.writeString(object.collectionId!);
        final collectionNameOffset =
            object.collectionName == null
                ? null
                : fbb.writeString(object.collectionName!);
        final deliveryNumberOffset =
            object.deliveryNumber == null
                ? null
                : fbb.writeString(object.deliveryNumber!);
        final storeNameOffset =
            object.storeName == null
                ? null
                : fbb.writeString(object.storeName!);
        final ownerNameOffset =
            object.ownerName == null
                ? null
                : fbb.writeString(object.ownerName!);
        final contactNumberOffset =
            object.contactNumber == null
                ? null
                : fbb.writeList(
                  object.contactNumber!
                      .map(fbb.writeString)
                      .toList(growable: false),
                );
        final addressOffset =
            object.address == null ? null : fbb.writeString(object.address!);
        final municipalityOffset =
            object.municipality == null
                ? null
                : fbb.writeString(object.municipality!);
        final provinceOffset =
            object.province == null ? null : fbb.writeString(object.province!);
        final modeOfPaymentOffset =
            object.modeOfPayment == null
                ? null
                : fbb.writeString(object.modeOfPayment!);
        final latitudeOffset =
            object.latitude == null ? null : fbb.writeString(object.latitude!);
        final longitudeOffset =
            object.longitude == null
                ? null
                : fbb.writeString(object.longitude!);
        final totalTimeOffset =
            object.totalTime == null
                ? null
                : fbb.writeString(object.totalTime!);
        final notesOffset =
            object.notes == null ? null : fbb.writeString(object.notes!);
        final remarksOffset =
            object.remarks == null ? null : fbb.writeString(object.remarks!);
        final modeOfPaymentStringOffset =
            object.modeOfPaymentString == null
                ? null
                : fbb.writeString(object.modeOfPaymentString!);
        fbb.startTable(27);
        fbb.addInt64(0, object.dbId);
        fbb.addOffset(1, idOffset);
        fbb.addOffset(2, collectionIdOffset);
        fbb.addOffset(3, collectionNameOffset);
        fbb.addOffset(4, deliveryNumberOffset);
        fbb.addOffset(5, storeNameOffset);
        fbb.addOffset(6, ownerNameOffset);
        fbb.addOffset(7, contactNumberOffset);
        fbb.addOffset(8, addressOffset);
        fbb.addOffset(9, municipalityOffset);
        fbb.addOffset(10, provinceOffset);
        fbb.addOffset(11, modeOfPaymentOffset);
        fbb.addInt64(12, object.numberOfInvoices);
        fbb.addFloat64(13, object.totalAmount);
        fbb.addOffset(14, latitudeOffset);
        fbb.addOffset(15, longitudeOffset);
        fbb.addInt64(16, object.created?.millisecondsSinceEpoch);
        fbb.addInt64(17, object.updated?.millisecondsSinceEpoch);
        fbb.addInt64(19, object.trip.targetId);
        fbb.addOffset(20, totalTimeOffset);
        fbb.addOffset(21, notesOffset);
        fbb.addOffset(22, remarksOffset);
        fbb.addOffset(23, modeOfPaymentStringOffset);
        fbb.addBool(24, object.hasNotes);
        fbb.addFloat64(25, object.confirmedTotalPayment);
        fbb.finish(fbb.endTable());
        return object.dbId;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final createdValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          36,
        );
        final updatedValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          38,
        );
        final idParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 6);
        final collectionIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final collectionNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final deliveryNumberParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final storeNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 14);
        final ownerNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 16);
        final contactNumberParam = const fb.ListReader<String>(
          fb.StringReader(asciiOptimization: true),
          lazy: false,
        ).vTableGetNullable(buffer, rootOffset, 18);
        final addressParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 20);
        final municipalityParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 22);
        final provinceParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 24);
        final modeOfPaymentParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 26);
        final totalTimeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 44);
        final numberOfInvoicesParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          28,
        );
        final totalAmountParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          30,
        );
        final confirmedTotalPaymentParam = const fb.Float64Reader()
            .vTableGetNullable(buffer, rootOffset, 54);
        final hasNotesParam = const fb.BoolReader().vTableGetNullable(
          buffer,
          rootOffset,
          52,
        );
        final latitudeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 32);
        final longitudeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 34);
        final createdParam =
            createdValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(createdValue);
        final updatedParam =
            updatedValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(updatedValue);
        final notesParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 46);
        final remarksParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 48);
        final modeOfPaymentStringParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 50);
        final object = CustomerEntity(
          id: idParam,
          collectionId: collectionIdParam,
          collectionName: collectionNameParam,
          deliveryNumber: deliveryNumberParam,
          storeName: storeNameParam,
          ownerName: ownerNameParam,
          contactNumber: contactNumberParam,
          address: addressParam,
          municipality: municipalityParam,
          province: provinceParam,
          modeOfPayment: modeOfPaymentParam,
          totalTime: totalTimeParam,
          numberOfInvoices: numberOfInvoicesParam,
          totalAmount: totalAmountParam,
          confirmedTotalPayment: confirmedTotalPaymentParam,
          hasNotes: hasNotesParam,
          latitude: latitudeParam,
          longitude: longitudeParam,
          created: createdParam,
          updated: updatedParam,
          notes: notesParam,
          remarks: remarksParam,
          modeOfPaymentString: modeOfPaymentStringParam,
        )..dbId = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        object.trip.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          42,
          0,
        );
        object.trip.attach(store);
        obx_int.InternalToManyAccess.setRelInfo<CustomerEntity>(
          object.deliveryStatus,
          store,
          obx_int.RelInfo<CustomerEntity>.toMany(1, object.dbId),
        );
        obx_int.InternalToManyAccess.setRelInfo<CustomerEntity>(
          object.invoices,
          store,
          obx_int.RelInfo<CustomerEntity>.toMany(2, object.dbId),
        );
        obx_int.InternalToManyAccess.setRelInfo<CustomerEntity>(
          object.transactions,
          store,
          obx_int.RelInfo<CustomerEntity>.toMany(30, object.dbId),
        );
        obx_int.InternalToManyAccess.setRelInfo<CustomerEntity>(
          object.returns,
          store,
          obx_int.RelInfo<CustomerEntity>.toMany(31, object.dbId),
        );
        return object;
      },
    ),
    CustomerModel: obx_int.EntityDefinition<CustomerModel>(
      model: _entities[4],
      toOneRelations: (CustomerModel object) => [],
      toManyRelations: (CustomerModel object) => {},
      getId: (CustomerModel object) => object.objectBoxId,
      setId: (CustomerModel object, int id) {
        object.objectBoxId = id;
      },
      objectToFB: (CustomerModel object, fb.Builder fbb) {
        final pocketbaseIdOffset = fbb.writeString(object.pocketbaseId);
        final tripIdOffset =
            object.tripId == null ? null : fbb.writeString(object.tripId!);
        fbb.startTable(22);
        fbb.addInt64(18, object.objectBoxId);
        fbb.addOffset(19, pocketbaseIdOffset);
        fbb.addOffset(20, tripIdOffset);
        fbb.finish(fbb.endTable());
        return object.objectBoxId;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final tripIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 44);
        final object =
            CustomerModel(tripId: tripIdParam)
              ..objectBoxId = const fb.Int64Reader().vTableGet(
                buffer,
                rootOffset,
                40,
                0,
              )
              ..pocketbaseId = const fb.StringReader(
                asciiOptimization: true,
              ).vTableGet(buffer, rootOffset, 42, '');

        return object;
      },
    ),
    DeliveryUpdateEntity: obx_int.EntityDefinition<DeliveryUpdateEntity>(
      model: _entities[5],
      toOneRelations: (DeliveryUpdateEntity object) => [],
      toManyRelations:
          (DeliveryUpdateEntity object) => {
            obx_int.RelInfo<DeliveryUpdateEntity>.toMany(22, object.dbId):
                object.customers,
          },
      getId: (DeliveryUpdateEntity object) => object.dbId,
      setId: (DeliveryUpdateEntity object, int id) {
        object.dbId = id;
      },
      objectToFB: (DeliveryUpdateEntity object, fb.Builder fbb) {
        final idOffset = object.id == null ? null : fbb.writeString(object.id!);
        final collectionIdOffset =
            object.collectionId == null
                ? null
                : fbb.writeString(object.collectionId!);
        final collectionNameOffset =
            object.collectionName == null
                ? null
                : fbb.writeString(object.collectionName!);
        final titleOffset =
            object.title == null ? null : fbb.writeString(object.title!);
        final subtitleOffset =
            object.subtitle == null ? null : fbb.writeString(object.subtitle!);
        final customerOffset =
            object.customer == null ? null : fbb.writeString(object.customer!);
        final assignedToOffset =
            object.assignedTo == null
                ? null
                : fbb.writeString(object.assignedTo!);
        final imageOffset =
            object.image == null ? null : fbb.writeString(object.image!);
        final remarksOffset =
            object.remarks == null ? null : fbb.writeString(object.remarks!);
        fbb.startTable(15);
        fbb.addInt64(0, object.dbId);
        fbb.addOffset(1, idOffset);
        fbb.addOffset(2, collectionIdOffset);
        fbb.addOffset(3, collectionNameOffset);
        fbb.addOffset(4, titleOffset);
        fbb.addOffset(5, subtitleOffset);
        fbb.addInt64(6, object.time?.millisecondsSinceEpoch);
        fbb.addInt64(7, object.created?.millisecondsSinceEpoch);
        fbb.addInt64(8, object.updated?.millisecondsSinceEpoch);
        fbb.addOffset(9, customerOffset);
        fbb.addBool(10, object.isAssigned);
        fbb.addOffset(11, assignedToOffset);
        fbb.addOffset(12, imageOffset);
        fbb.addOffset(13, remarksOffset);
        fbb.finish(fbb.endTable());
        return object.dbId;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final timeValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          16,
        );
        final createdValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          18,
        );
        final updatedValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          20,
        );
        final idParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 6);
        final collectionIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final collectionNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final titleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final subtitleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 14);
        final timeParam =
            timeValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(timeValue);
        final createdParam =
            createdValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(createdValue);
        final updatedParam =
            updatedValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(updatedValue);
        final customerParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 22);
        final remarksParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 30);
        final imageParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 28);
        final isAssignedParam = const fb.BoolReader().vTableGetNullable(
          buffer,
          rootOffset,
          24,
        );
        final assignedToParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 26);
        final object = DeliveryUpdateEntity(
          id: idParam,
          collectionId: collectionIdParam,
          collectionName: collectionNameParam,
          title: titleParam,
          subtitle: subtitleParam,
          time: timeParam,
          created: createdParam,
          updated: updatedParam,
          customer: customerParam,
          remarks: remarksParam,
          image: imageParam,
          isAssigned: isAssignedParam,
          assignedTo: assignedToParam,
        )..dbId = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        obx_int.InternalToManyAccess.setRelInfo<DeliveryUpdateEntity>(
          object.customers,
          store,
          obx_int.RelInfo<DeliveryUpdateEntity>.toMany(22, object.dbId),
        );
        return object;
      },
    ),
    DeliveryUpdateModel: obx_int.EntityDefinition<DeliveryUpdateModel>(
      model: _entities[6],
      toOneRelations: (DeliveryUpdateModel object) => [],
      toManyRelations: (DeliveryUpdateModel object) => {},
      getId: (DeliveryUpdateModel object) => object.objectBoxId,
      setId: (DeliveryUpdateModel object, int id) {
        object.objectBoxId = id;
      },
      objectToFB: (DeliveryUpdateModel object, fb.Builder fbb) {
        final pocketbaseIdOffset = fbb.writeString(object.pocketbaseId);
        final customerOffset =
            object.customer == null ? null : fbb.writeString(object.customer!);
        fbb.startTable(16);
        fbb.addInt64(12, object.objectBoxId);
        fbb.addOffset(13, pocketbaseIdOffset);
        fbb.addOffset(14, customerOffset);
        fbb.finish(fbb.endTable());
        return object.objectBoxId;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final customerParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 32);
        final object =
            DeliveryUpdateModel(customer: customerParam)
              ..objectBoxId = const fb.Int64Reader().vTableGet(
                buffer,
                rootOffset,
                28,
                0,
              )
              ..pocketbaseId = const fb.StringReader(
                asciiOptimization: true,
              ).vTableGet(buffer, rootOffset, 30, '');

        return object;
      },
    ),
    InvoiceEntity: obx_int.EntityDefinition<InvoiceEntity>(
      model: _entities[7],
      toOneRelations: (InvoiceEntity object) => [object.customer, object.trip],
      toManyRelations:
          (InvoiceEntity object) => {
            obx_int.RelInfo<InvoiceEntity>.toMany(5, object.dbId):
                object.productList,
          },
      getId: (InvoiceEntity object) => object.dbId,
      setId: (InvoiceEntity object, int id) {
        object.dbId = id;
      },
      objectToFB: (InvoiceEntity object, fb.Builder fbb) {
        final idOffset = object.id == null ? null : fbb.writeString(object.id!);
        final collectionIdOffset =
            object.collectionId == null
                ? null
                : fbb.writeString(object.collectionId!);
        final collectionNameOffset =
            object.collectionName == null
                ? null
                : fbb.writeString(object.collectionName!);
        final invoiceNumberOffset =
            object.invoiceNumber == null
                ? null
                : fbb.writeString(object.invoiceNumber!);
        final customerDeliveryStatusOffset =
            object.customerDeliveryStatus == null
                ? null
                : fbb.writeString(object.customerDeliveryStatus!);
        fbb.startTable(16);
        fbb.addInt64(0, object.dbId);
        fbb.addOffset(1, idOffset);
        fbb.addOffset(2, collectionIdOffset);
        fbb.addOffset(3, collectionNameOffset);
        fbb.addOffset(4, invoiceNumberOffset);
        fbb.addInt64(7, object.created?.millisecondsSinceEpoch);
        fbb.addInt64(8, object.updated?.millisecondsSinceEpoch);
        fbb.addOffset(9, customerDeliveryStatusOffset);
        fbb.addFloat64(10, object.totalAmount);
        fbb.addFloat64(11, object.confirmTotalAmount);
        fbb.addInt64(12, object.customer.targetId);
        fbb.addInt64(13, object.trip.targetId);
        fbb.addBool(14, object.isCompleted);
        fbb.finish(fbb.endTable());
        return object.dbId;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final createdValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          18,
        );
        final updatedValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          20,
        );
        final idParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 6);
        final collectionIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final collectionNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final invoiceNumberParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final totalAmountParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          24,
        );
        final confirmTotalAmountParam = const fb.Float64Reader()
            .vTableGetNullable(buffer, rootOffset, 26);
        final customerDeliveryStatusParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 22);
        final isCompletedParam = const fb.BoolReader().vTableGetNullable(
          buffer,
          rootOffset,
          32,
        );
        final createdParam =
            createdValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(createdValue);
        final updatedParam =
            updatedValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(updatedValue);
        final object = InvoiceEntity(
          id: idParam,
          collectionId: collectionIdParam,
          collectionName: collectionNameParam,
          invoiceNumber: invoiceNumberParam,
          totalAmount: totalAmountParam,
          confirmTotalAmount: confirmTotalAmountParam,
          customerDeliveryStatus: customerDeliveryStatusParam,
          isCompleted: isCompletedParam,
          created: createdParam,
          updated: updatedParam,
        )..dbId = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        object.customer.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          28,
          0,
        );
        object.customer.attach(store);
        object.trip.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          30,
          0,
        );
        object.trip.attach(store);
        obx_int.InternalToManyAccess.setRelInfo<InvoiceEntity>(
          object.productList,
          store,
          obx_int.RelInfo<InvoiceEntity>.toMany(5, object.dbId),
        );
        return object;
      },
    ),
    InvoiceModel: obx_int.EntityDefinition<InvoiceModel>(
      model: _entities[8],
      toOneRelations: (InvoiceModel object) => [],
      toManyRelations: (InvoiceModel object) => {},
      getId: (InvoiceModel object) => object.objectBoxId,
      setId: (InvoiceModel object, int id) {
        object.objectBoxId = id;
      },
      objectToFB: (InvoiceModel object, fb.Builder fbb) {
        final pocketbaseIdOffset = fbb.writeString(object.pocketbaseId);
        final customerIdOffset =
            object.customerId == null
                ? null
                : fbb.writeString(object.customerId!);
        final tripIdOffset =
            object.tripId == null ? null : fbb.writeString(object.tripId!);
        fbb.startTable(23);
        fbb.addInt64(10, object.objectBoxId);
        fbb.addOffset(11, pocketbaseIdOffset);
        fbb.addOffset(20, customerIdOffset);
        fbb.addOffset(21, tripIdOffset);
        fbb.finish(fbb.endTable());
        return object.objectBoxId;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final customerIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 44);
        final tripIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 46);
        final object =
            InvoiceModel(customerId: customerIdParam, tripId: tripIdParam)
              ..objectBoxId = const fb.Int64Reader().vTableGet(
                buffer,
                rootOffset,
                24,
                0,
              )
              ..pocketbaseId = const fb.StringReader(
                asciiOptimization: true,
              ).vTableGet(buffer, rootOffset, 26, '');

        return object;
      },
    ),
    PersonelEntity: obx_int.EntityDefinition<PersonelEntity>(
      model: _entities[9],
      toOneRelations:
          (PersonelEntity object) => [object.deliveryTeam, object.trip],
      toManyRelations: (PersonelEntity object) => {},
      getId: (PersonelEntity object) => object.dbId,
      setId: (PersonelEntity object, int id) {
        object.dbId = id;
      },
      objectToFB: (PersonelEntity object, fb.Builder fbb) {
        final idOffset = object.id == null ? null : fbb.writeString(object.id!);
        final collectionIdOffset =
            object.collectionId == null
                ? null
                : fbb.writeString(object.collectionId!);
        final collectionNameOffset =
            object.collectionName == null
                ? null
                : fbb.writeString(object.collectionName!);
        final nameOffset =
            object.name == null ? null : fbb.writeString(object.name!);
        fbb.startTable(10);
        fbb.addInt64(0, object.dbId);
        fbb.addOffset(1, idOffset);
        fbb.addOffset(2, collectionIdOffset);
        fbb.addOffset(3, collectionNameOffset);
        fbb.addOffset(4, nameOffset);
        fbb.addInt64(5, object.created?.millisecondsSinceEpoch);
        fbb.addInt64(6, object.updated?.millisecondsSinceEpoch);
        fbb.addInt64(7, object.deliveryTeam.targetId);
        fbb.addInt64(8, object.trip.targetId);
        fbb.finish(fbb.endTable());
        return object.dbId;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final createdValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          14,
        );
        final updatedValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          16,
        );
        final idParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 6);
        final collectionIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final collectionNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final createdParam =
            createdValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(createdValue);
        final updatedParam =
            updatedValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(updatedValue);
        final object = PersonelEntity(
          id: idParam,
          collectionId: collectionIdParam,
          collectionName: collectionNameParam,
          name: nameParam,
          created: createdParam,
          updated: updatedParam,
        )..dbId = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        object.deliveryTeam.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          18,
          0,
        );
        object.deliveryTeam.attach(store);
        object.trip.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          20,
          0,
        );
        object.trip.attach(store);
        return object;
      },
    ),
    PersonelModel: obx_int.EntityDefinition<PersonelModel>(
      model: _entities[10],
      toOneRelations: (PersonelModel object) => [],
      toManyRelations: (PersonelModel object) => {},
      getId: (PersonelModel object) => object.objectBoxId,
      setId: (PersonelModel object, int id) {
        object.objectBoxId = id;
      },
      objectToFB: (PersonelModel object, fb.Builder fbb) {
        final pocketbaseIdOffset = fbb.writeString(object.pocketbaseId);
        final tripIdOffset =
            object.tripId == null ? null : fbb.writeString(object.tripId!);
        final deliveryTeamIdOffset =
            object.deliveryTeamId == null
                ? null
                : fbb.writeString(object.deliveryTeamId!);
        fbb.startTable(12);
        fbb.addInt64(7, object.objectBoxId);
        fbb.addOffset(8, pocketbaseIdOffset);
        fbb.addOffset(9, tripIdOffset);
        fbb.addOffset(10, deliveryTeamIdOffset);
        fbb.finish(fbb.endTable());
        return object.objectBoxId;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final tripIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 22);
        final deliveryTeamIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 24);
        final object =
            PersonelModel(
                tripId: tripIdParam,
                deliveryTeamId: deliveryTeamIdParam,
              )
              ..objectBoxId = const fb.Int64Reader().vTableGet(
                buffer,
                rootOffset,
                18,
                0,
              )
              ..pocketbaseId = const fb.StringReader(
                asciiOptimization: true,
              ).vTableGet(buffer, rootOffset, 20, '');

        return object;
      },
    ),
    ProductEntity: obx_int.EntityDefinition<ProductEntity>(
      model: _entities[11],
      toOneRelations:
          (ProductEntity object) => [object.invoice, object.customer],
      toManyRelations: (ProductEntity object) => {},
      getId: (ProductEntity object) => object.dbId,
      setId: (ProductEntity object, int id) {
        object.dbId = id;
      },
      objectToFB: (ProductEntity object, fb.Builder fbb) {
        final idOffset = object.id == null ? null : fbb.writeString(object.id!);
        final nameOffset =
            object.name == null ? null : fbb.writeString(object.name!);
        final descriptionOffset =
            object.description == null
                ? null
                : fbb.writeString(object.description!);
        final imageOffset =
            object.image == null ? null : fbb.writeString(object.image!);
        fbb.startTable(49);
        fbb.addInt64(0, object.dbId);
        fbb.addOffset(1, idOffset);
        fbb.addOffset(4, nameOffset);
        fbb.addOffset(5, descriptionOffset);
        fbb.addOffset(8, imageOffset);
        fbb.addFloat64(20, object.pricePerPc);
        fbb.addFloat64(25, object.totalAmount);
        fbb.addFloat64(26, object.pricePerCase);
        fbb.addInt64(28, object.invoice.targetId);
        fbb.addInt64(29, object.customer.targetId);
        fbb.addBool(30, object.isCase);
        fbb.addBool(31, object.isPc);
        fbb.addBool(32, object.isPack);
        fbb.addBool(33, object.isBox);
        fbb.addInt64(34, object.unloadedProductCase);
        fbb.addInt64(35, object.unloadedProductPc);
        fbb.addInt64(36, object.unloadedProductPack);
        fbb.addInt64(37, object.unloadedProductBox);
        fbb.addInt64(43, object.case_);
        fbb.addInt64(44, object.pcs);
        fbb.addInt64(45, object.pack);
        fbb.addInt64(46, object.box);
        fbb.addBool(47, object.hasReturn);
        fbb.finish(fbb.endTable());
        return object.dbId;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 6);
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final descriptionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 14);
        final totalAmountParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          54,
        );
        final case_Param = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          90,
        );
        final pcsParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          92,
        );
        final packParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          94,
        );
        final boxParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          96,
        );
        final pricePerCaseParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          56,
        );
        final pricePerPcParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          44,
        );
        final imageParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 20);
        final hasReturnParam = const fb.BoolReader().vTableGetNullable(
          buffer,
          rootOffset,
          98,
        );
        final isCaseParam = const fb.BoolReader().vTableGetNullable(
          buffer,
          rootOffset,
          64,
        );
        final isPcParam = const fb.BoolReader().vTableGetNullable(
          buffer,
          rootOffset,
          66,
        );
        final isPackParam = const fb.BoolReader().vTableGetNullable(
          buffer,
          rootOffset,
          68,
        );
        final isBoxParam = const fb.BoolReader().vTableGetNullable(
          buffer,
          rootOffset,
          70,
        );
        final unloadedProductCaseParam = const fb.Int64Reader()
            .vTableGetNullable(buffer, rootOffset, 72);
        final unloadedProductPcParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          74,
        );
        final unloadedProductPackParam = const fb.Int64Reader()
            .vTableGetNullable(buffer, rootOffset, 76);
        final unloadedProductBoxParam = const fb.Int64Reader()
            .vTableGetNullable(buffer, rootOffset, 78);
        final object = ProductEntity(
          id: idParam,
          name: nameParam,
          description: descriptionParam,
          totalAmount: totalAmountParam,
          case_: case_Param,
          pcs: pcsParam,
          pack: packParam,
          box: boxParam,
          pricePerCase: pricePerCaseParam,
          pricePerPc: pricePerPcParam,
          image: imageParam,
          hasReturn: hasReturnParam,
          isCase: isCaseParam,
          isPc: isPcParam,
          isPack: isPackParam,
          isBox: isBoxParam,
          unloadedProductCase: unloadedProductCaseParam,
          unloadedProductPc: unloadedProductPcParam,
          unloadedProductPack: unloadedProductPackParam,
          unloadedProductBox: unloadedProductBoxParam,
        )..dbId = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        object.invoice.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          60,
          0,
        );
        object.invoice.attach(store);
        object.customer.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          62,
          0,
        );
        object.customer.attach(store);
        return object;
      },
    ),
    ProductModel: obx_int.EntityDefinition<ProductModel>(
      model: _entities[12],
      toOneRelations: (ProductModel object) => [],
      toManyRelations: (ProductModel object) => {},
      getId: (ProductModel object) => object.objectBoxId,
      setId: (ProductModel object, int id) {
        object.objectBoxId = id;
      },
      objectToFB: (ProductModel object, fb.Builder fbb) {
        final pocketbaseIdOffset = fbb.writeString(object.pocketbaseId);
        final invoiceIdOffset =
            object.invoiceId == null
                ? null
                : fbb.writeString(object.invoiceId!);
        final customerIdOffset =
            object.customerId == null
                ? null
                : fbb.writeString(object.customerId!);
        fbb.startTable(18);
        fbb.addOffset(13, pocketbaseIdOffset);
        fbb.addInt64(14, object.objectBoxId);
        fbb.addOffset(15, invoiceIdOffset);
        fbb.addOffset(16, customerIdOffset);
        fbb.finish(fbb.endTable());
        return object.objectBoxId;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final invoiceIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 34);
        final customerIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 36);
        final object =
            ProductModel(invoiceId: invoiceIdParam, customerId: customerIdParam)
              ..pocketbaseId = const fb.StringReader(
                asciiOptimization: true,
              ).vTableGet(buffer, rootOffset, 30, '')
              ..objectBoxId = const fb.Int64Reader().vTableGet(
                buffer,
                rootOffset,
                32,
                0,
              );

        return object;
      },
    ),
    TripEntity: obx_int.EntityDefinition<TripEntity>(
      model: _entities[13],
      toOneRelations:
          (TripEntity object) => [
            object.timeline,
            object.deliveryTeam,
            object.otp,
            object.endTripOtp,
            object.user,
          ],
      toManyRelations:
          (TripEntity object) => {
            obx_int.RelInfo<TripEntity>.toMany(7, object.dbId):
                object.customers,
            obx_int.RelInfo<TripEntity>.toMany(8, object.dbId):
                object.personels,
            obx_int.RelInfo<TripEntity>.toMany(9, object.dbId):
                object.checklist,
            obx_int.RelInfo<TripEntity>.toMany(19, object.dbId): object.vehicle,
            obx_int.RelInfo<TripEntity>.toMany(37, object.dbId):
                object.completedCustomers,
            obx_int.RelInfo<TripEntity>.toMany(38, object.dbId): object.returns,
            obx_int.RelInfo<TripEntity>.toMany(39, object.dbId):
                object.undeliverableCustomers,
            obx_int.RelInfo<TripEntity>.toMany(40, object.dbId):
                object.transactions,
            obx_int.RelInfo<TripEntity>.toMany(41, object.dbId):
                object.endTripChecklist,
            obx_int.RelInfo<TripEntity>.toMany(43, object.dbId):
                object.tripUpdates,
            obx_int.RelInfo<TripEntity>.toMany(44, object.dbId):
                object.invoices,
          },
      getId: (TripEntity object) => object.dbId,
      setId: (TripEntity object, int id) {
        object.dbId = id;
      },
      objectToFB: (TripEntity object, fb.Builder fbb) {
        final idOffset = object.id == null ? null : fbb.writeString(object.id!);
        final collectionIdOffset =
            object.collectionId == null
                ? null
                : fbb.writeString(object.collectionId!);
        final collectionNameOffset =
            object.collectionName == null
                ? null
                : fbb.writeString(object.collectionName!);
        final tripNumberIdOffset =
            object.tripNumberId == null
                ? null
                : fbb.writeString(object.tripNumberId!);
        final totalTripDistanceOffset =
            object.totalTripDistance == null
                ? null
                : fbb.writeString(object.totalTripDistance!);
        final qrCodeOffset =
            object.qrCode == null ? null : fbb.writeString(object.qrCode!);
        fbb.startTable(22);
        fbb.addInt64(0, object.dbId);
        fbb.addOffset(1, idOffset);
        fbb.addOffset(2, collectionIdOffset);
        fbb.addOffset(3, collectionNameOffset);
        fbb.addOffset(4, tripNumberIdOffset);
        fbb.addInt64(5, object.timeline.targetId);
        fbb.addBool(7, object.isAccepted);
        fbb.addInt64(8, object.created?.millisecondsSinceEpoch);
        fbb.addInt64(9, object.updated?.millisecondsSinceEpoch);
        fbb.addInt64(10, object.timeAccepted?.millisecondsSinceEpoch);
        fbb.addInt64(11, object.deliveryTeam.targetId);
        fbb.addInt64(12, object.otp.targetId);
        fbb.addInt64(13, object.endTripOtp.targetId);
        fbb.addBool(14, object.isEndTrip);
        fbb.addInt64(15, object.timeEndTrip?.millisecondsSinceEpoch);
        fbb.addOffset(16, totalTripDistanceOffset);
        fbb.addOffset(17, qrCodeOffset);
        fbb.addInt64(18, object.user.targetId);
        fbb.addFloat64(19, object.latitude);
        fbb.addFloat64(20, object.longitude);
        fbb.finish(fbb.endTable());
        return object.dbId;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final createdValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          20,
        );
        final updatedValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          22,
        );
        final timeAcceptedValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          24,
        );
        final timeEndTripValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          34,
        );
        final idParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 6);
        final collectionIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final collectionNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final tripNumberIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final latitudeParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          42,
        );
        final longitudeParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          44,
        );
        final totalTripDistanceParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 36);
        final timeEndTripParam =
            timeEndTripValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(timeEndTripValue);
        final isEndTripParam = const fb.BoolReader().vTableGetNullable(
          buffer,
          rootOffset,
          32,
        );
        final timeAcceptedParam =
            timeAcceptedValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(timeAcceptedValue);
        final isAcceptedParam = const fb.BoolReader().vTableGetNullable(
          buffer,
          rootOffset,
          18,
        );
        final qrCodeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 38);
        final createdParam =
            createdValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(createdValue);
        final updatedParam =
            updatedValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(updatedValue);
        final object = TripEntity(
          id: idParam,
          collectionId: collectionIdParam,
          collectionName: collectionNameParam,
          tripNumberId: tripNumberIdParam,
          latitude: latitudeParam,
          longitude: longitudeParam,
          totalTripDistance: totalTripDistanceParam,
          timeEndTrip: timeEndTripParam,
          isEndTrip: isEndTripParam,
          timeAccepted: timeAcceptedParam,
          isAccepted: isAcceptedParam,
          qrCode: qrCodeParam,
          created: createdParam,
          updated: updatedParam,
        )..dbId = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        object.timeline.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          14,
          0,
        );
        object.timeline.attach(store);
        object.deliveryTeam.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          26,
          0,
        );
        object.deliveryTeam.attach(store);
        object.otp.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          28,
          0,
        );
        object.otp.attach(store);
        object.endTripOtp.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          30,
          0,
        );
        object.endTripOtp.attach(store);
        object.user.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          40,
          0,
        );
        object.user.attach(store);
        obx_int.InternalToManyAccess.setRelInfo<TripEntity>(
          object.customers,
          store,
          obx_int.RelInfo<TripEntity>.toMany(7, object.dbId),
        );
        obx_int.InternalToManyAccess.setRelInfo<TripEntity>(
          object.personels,
          store,
          obx_int.RelInfo<TripEntity>.toMany(8, object.dbId),
        );
        obx_int.InternalToManyAccess.setRelInfo<TripEntity>(
          object.checklist,
          store,
          obx_int.RelInfo<TripEntity>.toMany(9, object.dbId),
        );
        obx_int.InternalToManyAccess.setRelInfo<TripEntity>(
          object.vehicle,
          store,
          obx_int.RelInfo<TripEntity>.toMany(19, object.dbId),
        );
        obx_int.InternalToManyAccess.setRelInfo<TripEntity>(
          object.completedCustomers,
          store,
          obx_int.RelInfo<TripEntity>.toMany(37, object.dbId),
        );
        obx_int.InternalToManyAccess.setRelInfo<TripEntity>(
          object.returns,
          store,
          obx_int.RelInfo<TripEntity>.toMany(38, object.dbId),
        );
        obx_int.InternalToManyAccess.setRelInfo<TripEntity>(
          object.undeliverableCustomers,
          store,
          obx_int.RelInfo<TripEntity>.toMany(39, object.dbId),
        );
        obx_int.InternalToManyAccess.setRelInfo<TripEntity>(
          object.transactions,
          store,
          obx_int.RelInfo<TripEntity>.toMany(40, object.dbId),
        );
        obx_int.InternalToManyAccess.setRelInfo<TripEntity>(
          object.endTripChecklist,
          store,
          obx_int.RelInfo<TripEntity>.toMany(41, object.dbId),
        );
        obx_int.InternalToManyAccess.setRelInfo<TripEntity>(
          object.tripUpdates,
          store,
          obx_int.RelInfo<TripEntity>.toMany(43, object.dbId),
        );
        obx_int.InternalToManyAccess.setRelInfo<TripEntity>(
          object.invoices,
          store,
          obx_int.RelInfo<TripEntity>.toMany(44, object.dbId),
        );
        return object;
      },
    ),
    TripModel: obx_int.EntityDefinition<TripModel>(
      model: _entities[14],
      toOneRelations: (TripModel object) => [],
      toManyRelations: (TripModel object) => {},
      getId: (TripModel object) => object.objectBoxId,
      setId: (TripModel object, int id) {
        object.objectBoxId = id;
      },
      objectToFB: (TripModel object, fb.Builder fbb) {
        final pocketbaseIdOffset =
            object.pocketbaseId == null
                ? null
                : fbb.writeString(object.pocketbaseId!);
        fbb.startTable(13);
        fbb.addInt64(10, object.objectBoxId);
        fbb.addOffset(11, pocketbaseIdOffset);
        fbb.finish(fbb.endTable());
        return object.objectBoxId;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final objectBoxIdParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          24,
          0,
        );
        final object = TripModel(objectBoxId: objectBoxIdParam)
          ..pocketbaseId = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGetNullable(buffer, rootOffset, 26);

        return object;
      },
    ),
    UpdateTimelineEntity: obx_int.EntityDefinition<UpdateTimelineEntity>(
      model: _entities[15],
      toOneRelations: (UpdateTimelineEntity object) => [],
      toManyRelations: (UpdateTimelineEntity object) => {},
      getId: (UpdateTimelineEntity object) => object.dbId,
      setId: (UpdateTimelineEntity object, int id) {
        object.dbId = id;
      },
      objectToFB: (UpdateTimelineEntity object, fb.Builder fbb) {
        final idOffset = object.id == null ? null : fbb.writeString(object.id!);
        final collectionIdOffset =
            object.collectionId == null
                ? null
                : fbb.writeString(object.collectionId!);
        final collectionNameOffset =
            object.collectionName == null
                ? null
                : fbb.writeString(object.collectionName!);
        fbb.startTable(7);
        fbb.addInt64(0, object.dbId);
        fbb.addOffset(1, idOffset);
        fbb.addOffset(2, collectionIdOffset);
        fbb.addOffset(3, collectionNameOffset);
        fbb.addInt64(4, object.created?.millisecondsSinceEpoch);
        fbb.addInt64(5, object.updated?.millisecondsSinceEpoch);
        fbb.finish(fbb.endTable());
        return object.dbId;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final createdValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          12,
        );
        final updatedValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          14,
        );
        final idParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 6);
        final collectionIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final collectionNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final createdParam =
            createdValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(createdValue);
        final updatedParam =
            updatedValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(updatedValue);
        final object = UpdateTimelineEntity(
          id: idParam,
          collectionId: collectionIdParam,
          collectionName: collectionNameParam,
          created: createdParam,
          updated: updatedParam,
        )..dbId = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

        return object;
      },
    ),
    UpdateTimelineModel: obx_int.EntityDefinition<UpdateTimelineModel>(
      model: _entities[16],
      toOneRelations: (UpdateTimelineModel object) => [],
      toManyRelations: (UpdateTimelineModel object) => {},
      getId: (UpdateTimelineModel object) => object.dbId,
      setId: (UpdateTimelineModel object, int id) {
        object.dbId = id;
      },
      objectToFB: (UpdateTimelineModel object, fb.Builder fbb) {
        final idOffset = object.id == null ? null : fbb.writeString(object.id!);
        final collectionIdOffset =
            object.collectionId == null
                ? null
                : fbb.writeString(object.collectionId!);
        final collectionNameOffset =
            object.collectionName == null
                ? null
                : fbb.writeString(object.collectionName!);
        fbb.startTable(7);
        fbb.addInt64(0, object.dbId);
        fbb.addOffset(1, idOffset);
        fbb.addOffset(2, collectionIdOffset);
        fbb.addOffset(3, collectionNameOffset);
        fbb.addInt64(4, object.created?.millisecondsSinceEpoch);
        fbb.addInt64(5, object.updated?.millisecondsSinceEpoch);
        fbb.finish(fbb.endTable());
        return object.dbId;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final createdValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          12,
        );
        final updatedValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          14,
        );
        final idParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 6);
        final collectionIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final collectionNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final createdParam =
            createdValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(createdValue);
        final updatedParam =
            updatedValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(updatedValue);
        final object = UpdateTimelineModel(
          id: idParam,
          collectionId: collectionIdParam,
          collectionName: collectionNameParam,
          created: createdParam,
          updated: updatedParam,
        )..dbId = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

        return object;
      },
    ),
    VehicleEntity: obx_int.EntityDefinition<VehicleEntity>(
      model: _entities[17],
      toOneRelations:
          (VehicleEntity object) => [object.deliveryTeam, object.trip],
      toManyRelations: (VehicleEntity object) => {},
      getId: (VehicleEntity object) => object.dbId,
      setId: (VehicleEntity object, int id) {
        object.dbId = id;
      },
      objectToFB: (VehicleEntity object, fb.Builder fbb) {
        final idOffset = object.id == null ? null : fbb.writeString(object.id!);
        final collectionIdOffset =
            object.collectionId == null
                ? null
                : fbb.writeString(object.collectionId!);
        final collectionNameOffset =
            object.collectionName == null
                ? null
                : fbb.writeString(object.collectionName!);
        final vehicleNameOffset =
            object.vehicleName == null
                ? null
                : fbb.writeString(object.vehicleName!);
        final vehiclePlateNumberOffset =
            object.vehiclePlateNumber == null
                ? null
                : fbb.writeString(object.vehiclePlateNumber!);
        final vehicleTypeOffset =
            object.vehicleType == null
                ? null
                : fbb.writeString(object.vehicleType!);
        fbb.startTable(12);
        fbb.addInt64(0, object.dbId);
        fbb.addOffset(1, idOffset);
        fbb.addOffset(2, collectionIdOffset);
        fbb.addOffset(3, collectionNameOffset);
        fbb.addOffset(4, vehicleNameOffset);
        fbb.addOffset(5, vehiclePlateNumberOffset);
        fbb.addOffset(6, vehicleTypeOffset);
        fbb.addInt64(7, object.created?.millisecondsSinceEpoch);
        fbb.addInt64(8, object.updated?.millisecondsSinceEpoch);
        fbb.addInt64(9, object.deliveryTeam.targetId);
        fbb.addInt64(10, object.trip.targetId);
        fbb.finish(fbb.endTable());
        return object.dbId;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final createdValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          18,
        );
        final updatedValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          20,
        );
        final idParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 6);
        final collectionIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final collectionNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final vehicleNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final vehiclePlateNumberParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 14);
        final vehicleTypeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 16);
        final createdParam =
            createdValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(createdValue);
        final updatedParam =
            updatedValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(updatedValue);
        final object = VehicleEntity(
          id: idParam,
          collectionId: collectionIdParam,
          collectionName: collectionNameParam,
          vehicleName: vehicleNameParam,
          vehiclePlateNumber: vehiclePlateNumberParam,
          vehicleType: vehicleTypeParam,
          created: createdParam,
          updated: updatedParam,
        )..dbId = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        object.deliveryTeam.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          22,
          0,
        );
        object.deliveryTeam.attach(store);
        object.trip.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          24,
          0,
        );
        object.trip.attach(store);
        return object;
      },
    ),
    VehicleModel: obx_int.EntityDefinition<VehicleModel>(
      model: _entities[18],
      toOneRelations: (VehicleModel object) => [],
      toManyRelations: (VehicleModel object) => {},
      getId: (VehicleModel object) => object.objectBoxId,
      setId: (VehicleModel object, int id) {
        object.objectBoxId = id;
      },
      objectToFB: (VehicleModel object, fb.Builder fbb) {
        final pocketbaseIdOffset = fbb.writeString(object.pocketbaseId);
        final tripIdOffset =
            object.tripId == null ? null : fbb.writeString(object.tripId!);
        final deliveryTeamIdOffset =
            object.deliveryTeamId == null
                ? null
                : fbb.writeString(object.deliveryTeamId!);
        fbb.startTable(14);
        fbb.addInt64(9, object.objectBoxId);
        fbb.addOffset(10, pocketbaseIdOffset);
        fbb.addOffset(11, tripIdOffset);
        fbb.addOffset(12, deliveryTeamIdOffset);
        fbb.finish(fbb.endTable());
        return object.objectBoxId;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final tripIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 26);
        final deliveryTeamIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 28);
        final object =
            VehicleModel(
                tripId: tripIdParam,
                deliveryTeamId: deliveryTeamIdParam,
              )
              ..objectBoxId = const fb.Int64Reader().vTableGet(
                buffer,
                rootOffset,
                22,
                0,
              )
              ..pocketbaseId = const fb.StringReader(
                asciiOptimization: true,
              ).vTableGet(buffer, rootOffset, 24, '');

        return object;
      },
    ),
    DeliveryTeamEntity: obx_int.EntityDefinition<DeliveryTeamEntity>(
      model: _entities[19],
      toOneRelations: (DeliveryTeamEntity object) => [object.trip],
      toManyRelations:
          (DeliveryTeamEntity object) => {
            obx_int.RelInfo<DeliveryTeamEntity>.toMany(13, object.dbId):
                object.personels,
            obx_int.RelInfo<DeliveryTeamEntity>.toMany(14, object.dbId):
                object.checklist,
            obx_int.RelInfo<DeliveryTeamEntity>.toMany(20, object.dbId):
                object.vehicle,
          },
      getId: (DeliveryTeamEntity object) => object.dbId,
      setId: (DeliveryTeamEntity object, int id) {
        object.dbId = id;
      },
      objectToFB: (DeliveryTeamEntity object, fb.Builder fbb) {
        final idOffset = object.id == null ? null : fbb.writeString(object.id!);
        final collectionIdOffset =
            object.collectionId == null
                ? null
                : fbb.writeString(object.collectionId!);
        final collectionNameOffset =
            object.collectionName == null
                ? null
                : fbb.writeString(object.collectionName!);
        fbb.startTable(14);
        fbb.addInt64(0, object.dbId);
        fbb.addOffset(1, idOffset);
        fbb.addOffset(2, collectionIdOffset);
        fbb.addOffset(3, collectionNameOffset);
        fbb.addInt64(6, object.activeDeliveries);
        fbb.addInt64(7, object.totalDelivered);
        fbb.addFloat64(8, object.totalDistanceTravelled);
        fbb.addInt64(9, object.created?.millisecondsSinceEpoch);
        fbb.addInt64(10, object.updated?.millisecondsSinceEpoch);
        fbb.addInt64(11, object.undeliveredCustomers);
        fbb.addInt64(12, object.trip.targetId);
        fbb.finish(fbb.endTable());
        return object.dbId;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final createdValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          22,
        );
        final updatedValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          24,
        );
        final idParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 6);
        final collectionIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final collectionNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final activeDeliveriesParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          16,
        );
        final totalDeliveredParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          18,
        );
        final undeliveredCustomersParam = const fb.Int64Reader()
            .vTableGetNullable(buffer, rootOffset, 26);
        final totalDistanceTravelledParam = const fb.Float64Reader()
            .vTableGetNullable(buffer, rootOffset, 20);
        final createdParam =
            createdValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(createdValue);
        final updatedParam =
            updatedValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(updatedValue);
        final object = DeliveryTeamEntity(
          id: idParam,
          collectionId: collectionIdParam,
          collectionName: collectionNameParam,
          activeDeliveries: activeDeliveriesParam,
          totalDelivered: totalDeliveredParam,
          undeliveredCustomers: undeliveredCustomersParam,
          totalDistanceTravelled: totalDistanceTravelledParam,
          created: createdParam,
          updated: updatedParam,
        )..dbId = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        object.trip.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          28,
          0,
        );
        object.trip.attach(store);
        obx_int.InternalToManyAccess.setRelInfo<DeliveryTeamEntity>(
          object.personels,
          store,
          obx_int.RelInfo<DeliveryTeamEntity>.toMany(13, object.dbId),
        );
        obx_int.InternalToManyAccess.setRelInfo<DeliveryTeamEntity>(
          object.checklist,
          store,
          obx_int.RelInfo<DeliveryTeamEntity>.toMany(14, object.dbId),
        );
        obx_int.InternalToManyAccess.setRelInfo<DeliveryTeamEntity>(
          object.vehicle,
          store,
          obx_int.RelInfo<DeliveryTeamEntity>.toMany(20, object.dbId),
        );
        return object;
      },
    ),
    OtpModel: obx_int.EntityDefinition<OtpModel>(
      model: _entities[20],
      toOneRelations: (OtpModel object) => [object.trip],
      toManyRelations: (OtpModel object) => {},
      getId: (OtpModel object) => object.dbId,
      setId: (OtpModel object, int id) {
        object.dbId = id;
      },
      objectToFB: (OtpModel object, fb.Builder fbb) {
        final idOffset = fbb.writeString(object.id);
        final otpCodeOffset = fbb.writeString(object.otpCode);
        final generatedCodeOffset =
            object.generatedCode == null
                ? null
                : fbb.writeString(object.generatedCode!);
        fbb.startTable(10);
        fbb.addInt64(0, object.dbId);
        fbb.addOffset(1, idOffset);
        fbb.addOffset(2, otpCodeOffset);
        fbb.addOffset(3, generatedCodeOffset);
        fbb.addBool(4, object.isVerified);
        fbb.addInt64(5, object.createdAt.millisecondsSinceEpoch);
        fbb.addInt64(6, object.expiresAt.millisecondsSinceEpoch);
        fbb.addInt64(7, object.verifiedAt?.millisecondsSinceEpoch);
        fbb.addInt64(8, object.trip.targetId);
        fbb.finish(fbb.endTable());
        return object.dbId;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final verifiedAtValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          18,
        );
        final idParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final otpCodeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final generatedCodeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final isVerifiedParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          12,
          false,
        );
        final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0),
        );
        final expiresAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0),
        );
        final verifiedAtParam =
            verifiedAtValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(verifiedAtValue);
        final object = OtpModel(
          id: idParam,
          otpCode: otpCodeParam,
          generatedCode: generatedCodeParam,
          isVerified: isVerifiedParam,
          createdAt: createdAtParam,
          expiresAt: expiresAtParam,
          verifiedAt: verifiedAtParam,
        )..dbId = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        object.trip.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          20,
          0,
        );
        object.trip.attach(store);
        return object;
      },
    ),
    TransactionEntity: obx_int.EntityDefinition<TransactionEntity>(
      model: _entities[21],
      toOneRelations:
          (TransactionEntity object) => [
            object.tripRef,
            object.completedCustomerRef,
            object.customer,
          ],
      toManyRelations:
          (TransactionEntity object) => {
            obx_int.RelInfo<TransactionEntity>.toMany(15, object.dbId):
                object.invoices,
          },
      getId: (TransactionEntity object) => object.dbId,
      setId: (TransactionEntity object, int id) {
        object.dbId = id;
      },
      objectToFB: (TransactionEntity object, fb.Builder fbb) {
        final idOffset = object.id == null ? null : fbb.writeString(object.id!);
        final collectionIdOffset =
            object.collectionId == null
                ? null
                : fbb.writeString(object.collectionId!);
        final collectionNameOffset =
            object.collectionName == null
                ? null
                : fbb.writeString(object.collectionName!);
        final customerNameOffset =
            object.customerName == null
                ? null
                : fbb.writeString(object.customerName!);
        final totalAmountOffset =
            object.totalAmount == null
                ? null
                : fbb.writeString(object.totalAmount!);
        final deliveryNumberOffset =
            object.deliveryNumber == null
                ? null
                : fbb.writeString(object.deliveryNumber!);
        final transactionStatusStringOffset =
            object.transactionStatusString == null
                ? null
                : fbb.writeString(object.transactionStatusString!);
        final modeOfPaymentStringOffset =
            object.modeOfPaymentString == null
                ? null
                : fbb.writeString(object.modeOfPaymentString!);
        final customerImageOffset =
            object.customerImage == null
                ? null
                : fbb.writeString(object.customerImage!);
        final refNumberOffset =
            object.refNumber == null
                ? null
                : fbb.writeString(object.refNumber!);
        fbb.startTable(20);
        fbb.addInt64(0, object.dbId);
        fbb.addOffset(1, idOffset);
        fbb.addOffset(2, collectionIdOffset);
        fbb.addOffset(3, collectionNameOffset);
        fbb.addOffset(5, customerNameOffset);
        fbb.addOffset(6, totalAmountOffset);
        fbb.addOffset(7, deliveryNumberOffset);
        fbb.addInt64(8, object.transactionDate?.millisecondsSinceEpoch);
        fbb.addInt64(9, object.createdAt?.millisecondsSinceEpoch);
        fbb.addInt64(10, object.updatedAt?.millisecondsSinceEpoch);
        fbb.addBool(11, object.isCompleted);
        fbb.addOffset(12, transactionStatusStringOffset);
        fbb.addOffset(13, modeOfPaymentStringOffset);
        fbb.addOffset(14, customerImageOffset);
        fbb.addOffset(15, refNumberOffset);
        fbb.addInt64(16, object.tripRef.targetId);
        fbb.addInt64(17, object.completedCustomerRef.targetId);
        fbb.addInt64(18, object.customer.targetId);
        fbb.finish(fbb.endTable());
        return object.dbId;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final transactionDateValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          20,
        );
        final createdAtValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          22,
        );
        final updatedAtValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          24,
        );
        final idParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 6);
        final collectionIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final collectionNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final customerNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 14);
        final refNumberParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 34);
        final totalAmountParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 16);
        final customerImageParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 32);
        final deliveryNumberParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 18);
        final transactionDateParam =
            transactionDateValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(transactionDateValue);
        final transactionStatusStringParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 28);
        final modeOfPaymentStringParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 30);
        final createdAtParam =
            createdAtValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(createdAtValue);
        final updatedAtParam =
            updatedAtValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(updatedAtValue);
        final isCompletedParam = const fb.BoolReader().vTableGetNullable(
          buffer,
          rootOffset,
          26,
        );
        final object = TransactionEntity(
          id: idParam,
          collectionId: collectionIdParam,
          collectionName: collectionNameParam,
          customerName: customerNameParam,
          refNumber: refNumberParam,
          totalAmount: totalAmountParam,
          customerImage: customerImageParam,
          deliveryNumber: deliveryNumberParam,
          transactionDate: transactionDateParam,
          transactionStatusString: transactionStatusStringParam,
          modeOfPaymentString: modeOfPaymentStringParam,
          createdAt: createdAtParam,
          updatedAt: updatedAtParam,
          isCompleted: isCompletedParam,
        )..dbId = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        object.tripRef.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          36,
          0,
        );
        object.tripRef.attach(store);
        object.completedCustomerRef.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          38,
          0,
        );
        object.completedCustomerRef.attach(store);
        object.customer.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          40,
          0,
        );
        object.customer.attach(store);
        obx_int.InternalToManyAccess.setRelInfo<TransactionEntity>(
          object.invoices,
          store,
          obx_int.RelInfo<TransactionEntity>.toMany(15, object.dbId),
        );
        return object;
      },
    ),
    TransactionModel: obx_int.EntityDefinition<TransactionModel>(
      model: _entities[22],
      toOneRelations: (TransactionModel object) => [],
      toManyRelations: (TransactionModel object) => {},
      getId: (TransactionModel object) => object.objectBoxId,
      setId: (TransactionModel object, int id) {
        object.objectBoxId = id;
      },
      objectToFB: (TransactionModel object, fb.Builder fbb) {
        final pocketbaseIdOffset =
            object.pocketbaseId == null
                ? null
                : fbb.writeString(object.pocketbaseId!);
        final customerIdOffset =
            object.customerId == null
                ? null
                : fbb.writeString(object.customerId!);
        final tripIdOffset =
            object.tripId == null ? null : fbb.writeString(object.tripId!);
        final completedCustomerIdOffset =
            object.completedCustomerId == null
                ? null
                : fbb.writeString(object.completedCustomerId!);
        fbb.startTable(27);
        fbb.addInt64(16, object.objectBoxId);
        fbb.addOffset(17, pocketbaseIdOffset);
        fbb.addOffset(22, customerIdOffset);
        fbb.addOffset(23, tripIdOffset);
        fbb.addOffset(24, completedCustomerIdOffset);
        fbb.addInt64(25, object.transactionDate?.millisecondsSinceEpoch);
        fbb.finish(fbb.endTable());
        return object.objectBoxId;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final transactionDateValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          54,
        );
        final transactionDateParam =
            transactionDateValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(transactionDateValue);
        final object =
            TransactionModel(transactionDate: transactionDateParam)
              ..objectBoxId = const fb.Int64Reader().vTableGet(
                buffer,
                rootOffset,
                36,
                0,
              )
              ..pocketbaseId = const fb.StringReader(
                asciiOptimization: true,
              ).vTableGetNullable(buffer, rootOffset, 38)
              ..customerId = const fb.StringReader(
                asciiOptimization: true,
              ).vTableGetNullable(buffer, rootOffset, 48)
              ..tripId = const fb.StringReader(
                asciiOptimization: true,
              ).vTableGetNullable(buffer, rootOffset, 50)
              ..completedCustomerId = const fb.StringReader(
                asciiOptimization: true,
              ).vTableGetNullable(buffer, rootOffset, 52);

        return object;
      },
    ),
    LocalUsersModel: obx_int.EntityDefinition<LocalUsersModel>(
      model: _entities[23],
      toOneRelations: (LocalUsersModel object) => [],
      toManyRelations: (LocalUsersModel object) => {},
      getId: (LocalUsersModel object) => object.objectBoxId,
      setId: (LocalUsersModel object, int id) {
        object.objectBoxId = id;
      },
      objectToFB: (LocalUsersModel object, fb.Builder fbb) {
        final pocketbaseIdOffset = fbb.writeString(object.pocketbaseId);
        final tripIdOffset =
            object.tripId == null ? null : fbb.writeString(object.tripId!);
        final deliveryTeamIdOffset =
            object.deliveryTeamId == null
                ? null
                : fbb.writeString(object.deliveryTeamId!);
        final tokenOffset =
            object.token == null ? null : fbb.writeString(object.token!);
        fbb.startTable(27);
        fbb.addInt64(21, object.objectBoxId);
        fbb.addOffset(22, pocketbaseIdOffset);
        fbb.addOffset(23, tripIdOffset);
        fbb.addOffset(24, deliveryTeamIdOffset);
        fbb.addOffset(25, tokenOffset);
        fbb.finish(fbb.endTable());
        return object.objectBoxId;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final tripIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 50);
        final deliveryTeamIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 52);
        final tokenParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 54);
        final object =
            LocalUsersModel(
                tripId: tripIdParam,
                deliveryTeamId: deliveryTeamIdParam,
                token: tokenParam,
              )
              ..objectBoxId = const fb.Int64Reader().vTableGet(
                buffer,
                rootOffset,
                46,
                0,
              )
              ..pocketbaseId = const fb.StringReader(
                asciiOptimization: true,
              ).vTableGet(buffer, rootOffset, 48, '');

        return object;
      },
    ),
    DeliveryTeamModel: obx_int.EntityDefinition<DeliveryTeamModel>(
      model: _entities[24],
      toOneRelations: (DeliveryTeamModel object) => [],
      toManyRelations: (DeliveryTeamModel object) => {},
      getId: (DeliveryTeamModel object) => object.objectBoxId,
      setId: (DeliveryTeamModel object, int id) {
        object.objectBoxId = id;
      },
      objectToFB: (DeliveryTeamModel object, fb.Builder fbb) {
        final pocketbaseIdOffset = fbb.writeString(object.pocketbaseId);
        final tripIdOffset =
            object.tripId == null ? null : fbb.writeString(object.tripId!);
        fbb.startTable(4);
        fbb.addInt64(0, object.objectBoxId);
        fbb.addOffset(1, pocketbaseIdOffset);
        fbb.addOffset(2, tripIdOffset);
        fbb.finish(fbb.endTable());
        return object.objectBoxId;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);

        final object =
            DeliveryTeamModel()
              ..objectBoxId = const fb.Int64Reader().vTableGet(
                buffer,
                rootOffset,
                4,
                0,
              )
              ..pocketbaseId = const fb.StringReader(
                asciiOptimization: true,
              ).vTableGet(buffer, rootOffset, 6, '')
              ..tripId = const fb.StringReader(
                asciiOptimization: true,
              ).vTableGetNullable(buffer, rootOffset, 8);

        return object;
      },
    ),
    ReturnEntity: obx_int.EntityDefinition<ReturnEntity>(
      model: _entities[25],
      toOneRelations:
          (ReturnEntity object) => [
            object.invoiceRef,
            object.customerRef,
            object.tripRef,
          ],
      toManyRelations: (ReturnEntity object) => {},
      getId: (ReturnEntity object) => object.dbId,
      setId: (ReturnEntity object, int id) {
        object.dbId = id;
      },
      objectToFB: (ReturnEntity object, fb.Builder fbb) {
        final idOffset = object.id == null ? null : fbb.writeString(object.id!);
        final collectionIdOffset =
            object.collectionId == null
                ? null
                : fbb.writeString(object.collectionId!);
        final collectionNameOffset =
            object.collectionName == null
                ? null
                : fbb.writeString(object.collectionName!);
        final productNameOffset =
            object.productName == null
                ? null
                : fbb.writeString(object.productName!);
        final productDescriptionOffset =
            object.productDescription == null
                ? null
                : fbb.writeString(object.productDescription!);
        fbb.startTable(24);
        fbb.addInt64(0, object.dbId);
        fbb.addOffset(1, idOffset);
        fbb.addOffset(2, collectionIdOffset);
        fbb.addOffset(3, collectionNameOffset);
        fbb.addOffset(4, productNameOffset);
        fbb.addOffset(5, productDescriptionOffset);
        fbb.addInt64(8, object.returnDate?.millisecondsSinceEpoch);
        fbb.addInt64(12, object.productQuantityCase);
        fbb.addInt64(13, object.productQuantityPcs);
        fbb.addInt64(14, object.invoiceRef.targetId);
        fbb.addInt64(15, object.customerRef.targetId);
        fbb.addInt64(16, object.tripRef.targetId);
        fbb.addInt64(17, object.productQuantityPack);
        fbb.addInt64(18, object.productQuantityBox);
        fbb.addBool(19, object.isCase);
        fbb.addBool(20, object.isPcs);
        fbb.addBool(21, object.isBox);
        fbb.addBool(22, object.isPack);
        fbb.finish(fbb.endTable());
        return object.dbId;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final returnDateValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          20,
        );
        final idParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 6);
        final collectionIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final collectionNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final productNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final productDescriptionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 14);
        final returnDateParam =
            returnDateValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(returnDateValue);
        final productQuantityCaseParam = const fb.Int64Reader()
            .vTableGetNullable(buffer, rootOffset, 28);
        final productQuantityPcsParam = const fb.Int64Reader()
            .vTableGetNullable(buffer, rootOffset, 30);
        final productQuantityPackParam = const fb.Int64Reader()
            .vTableGetNullable(buffer, rootOffset, 38);
        final productQuantityBoxParam = const fb.Int64Reader()
            .vTableGetNullable(buffer, rootOffset, 40);
        final isCaseParam = const fb.BoolReader().vTableGetNullable(
          buffer,
          rootOffset,
          42,
        );
        final isPcsParam = const fb.BoolReader().vTableGetNullable(
          buffer,
          rootOffset,
          44,
        );
        final isBoxParam = const fb.BoolReader().vTableGetNullable(
          buffer,
          rootOffset,
          46,
        );
        final isPackParam = const fb.BoolReader().vTableGetNullable(
          buffer,
          rootOffset,
          48,
        );
        final object = ReturnEntity(
          id: idParam,
          collectionId: collectionIdParam,
          collectionName: collectionNameParam,
          productName: productNameParam,
          productDescription: productDescriptionParam,
          returnDate: returnDateParam,
          productQuantityCase: productQuantityCaseParam,
          productQuantityPcs: productQuantityPcsParam,
          productQuantityPack: productQuantityPackParam,
          productQuantityBox: productQuantityBoxParam,
          isCase: isCaseParam,
          isPcs: isPcsParam,
          isBox: isBoxParam,
          isPack: isPackParam,
        )..dbId = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        object.invoiceRef.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          32,
          0,
        );
        object.invoiceRef.attach(store);
        object.customerRef.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          34,
          0,
        );
        object.customerRef.attach(store);
        object.tripRef.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          36,
          0,
        );
        object.tripRef.attach(store);
        return object;
      },
    ),
    ReturnModel: obx_int.EntityDefinition<ReturnModel>(
      model: _entities[26],
      toOneRelations: (ReturnModel object) => [],
      toManyRelations: (ReturnModel object) => {},
      getId: (ReturnModel object) => object.objectBoxId,
      setId: (ReturnModel object, int id) {
        object.objectBoxId = id;
      },
      objectToFB: (ReturnModel object, fb.Builder fbb) {
        final pocketbaseIdOffset = fbb.writeString(object.pocketbaseId);
        final tripIdOffset =
            object.tripId == null ? null : fbb.writeString(object.tripId!);
        fbb.startTable(5);
        fbb.addInt64(0, object.objectBoxId);
        fbb.addOffset(1, pocketbaseIdOffset);
        fbb.addOffset(3, tripIdOffset);
        fbb.finish(fbb.endTable());
        return object.objectBoxId;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);

        final object =
            ReturnModel()
              ..objectBoxId = const fb.Int64Reader().vTableGet(
                buffer,
                rootOffset,
                4,
                0,
              )
              ..pocketbaseId = const fb.StringReader(
                asciiOptimization: true,
              ).vTableGet(buffer, rootOffset, 6, '')
              ..tripId = const fb.StringReader(
                asciiOptimization: true,
              ).vTableGetNullable(buffer, rootOffset, 10);

        return object;
      },
    ),
    CompletedCustomerModel: obx_int.EntityDefinition<CompletedCustomerModel>(
      model: _entities[27],
      toOneRelations: (CompletedCustomerModel object) => [],
      toManyRelations: (CompletedCustomerModel object) => {},
      getId: (CompletedCustomerModel object) => object.objectBoxId,
      setId: (CompletedCustomerModel object, int id) {
        object.objectBoxId = id;
      },
      objectToFB: (CompletedCustomerModel object, fb.Builder fbb) {
        final pocketbaseIdOffset = fbb.writeString(object.pocketbaseId);
        final tripIdOffset =
            object.tripId == null ? null : fbb.writeString(object.tripId!);
        fbb.startTable(5);
        fbb.addInt64(0, object.objectBoxId);
        fbb.addOffset(1, pocketbaseIdOffset);
        fbb.addOffset(2, tripIdOffset);
        fbb.addInt64(3, object.timeCompleted?.millisecondsSinceEpoch);
        fbb.finish(fbb.endTable());
        return object.objectBoxId;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final timeCompletedValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          10,
        );
        final timeCompletedParam =
            timeCompletedValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(timeCompletedValue);
        final tripIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final object =
            CompletedCustomerModel(
                timeCompleted: timeCompletedParam,
                tripId: tripIdParam,
              )
              ..objectBoxId = const fb.Int64Reader().vTableGet(
                buffer,
                rootOffset,
                4,
                0,
              )
              ..pocketbaseId = const fb.StringReader(
                asciiOptimization: true,
              ).vTableGet(buffer, rootOffset, 6, '');

        return object;
      },
    ),
    CompletedCustomerEntity: obx_int.EntityDefinition<CompletedCustomerEntity>(
      model: _entities[28],
      toOneRelations:
          (CompletedCustomerEntity object) => [
            object.transactionRef,
            object.customerRef,
            object.trip,
          ],
      toManyRelations:
          (CompletedCustomerEntity object) => {
            obx_int.RelInfo<CompletedCustomerEntity>.toMany(24, object.dbId):
                object.invoices,
            obx_int.RelInfo<CompletedCustomerEntity>.toMany(25, object.dbId):
                object.deliveryStatus,
            obx_int.RelInfo<CompletedCustomerEntity>.toMany(28, object.dbId):
                object.returns,
          },
      getId: (CompletedCustomerEntity object) => object.dbId,
      setId: (CompletedCustomerEntity object, int id) {
        object.dbId = id;
      },
      objectToFB: (CompletedCustomerEntity object, fb.Builder fbb) {
        final idOffset = object.id == null ? null : fbb.writeString(object.id!);
        final collectionIdOffset =
            object.collectionId == null
                ? null
                : fbb.writeString(object.collectionId!);
        final collectionNameOffset =
            object.collectionName == null
                ? null
                : fbb.writeString(object.collectionName!);
        final deliveryNumberOffset =
            object.deliveryNumber == null
                ? null
                : fbb.writeString(object.deliveryNumber!);
        final storeNameOffset =
            object.storeName == null
                ? null
                : fbb.writeString(object.storeName!);
        final ownerNameOffset =
            object.ownerName == null
                ? null
                : fbb.writeString(object.ownerName!);
        final contactNumberOffset =
            object.contactNumber == null
                ? null
                : fbb.writeList(
                  object.contactNumber!
                      .map(fbb.writeString)
                      .toList(growable: false),
                );
        final addressOffset =
            object.address == null ? null : fbb.writeString(object.address!);
        final municipalityOffset =
            object.municipality == null
                ? null
                : fbb.writeString(object.municipality!);
        final provinceOffset =
            object.province == null ? null : fbb.writeString(object.province!);
        final modeOfPaymentOffset =
            object.modeOfPayment == null
                ? null
                : fbb.writeString(object.modeOfPayment!);
        final totalTimeOffset =
            object.totalTime == null
                ? null
                : fbb.writeString(object.totalTime!);
        final modeOfPaymentStringOffset =
            object.modeOfPaymentString == null
                ? null
                : fbb.writeString(object.modeOfPaymentString!);
        fbb.startTable(20);
        fbb.addInt64(0, object.dbId);
        fbb.addOffset(1, idOffset);
        fbb.addOffset(2, collectionIdOffset);
        fbb.addOffset(3, collectionNameOffset);
        fbb.addOffset(4, deliveryNumberOffset);
        fbb.addOffset(5, storeNameOffset);
        fbb.addOffset(6, ownerNameOffset);
        fbb.addOffset(7, contactNumberOffset);
        fbb.addOffset(8, addressOffset);
        fbb.addOffset(9, municipalityOffset);
        fbb.addOffset(10, provinceOffset);
        fbb.addOffset(11, modeOfPaymentOffset);
        fbb.addInt64(12, object.timeCompleted?.millisecondsSinceEpoch);
        fbb.addFloat64(13, object.totalAmount);
        fbb.addInt64(14, object.transactionRef.targetId);
        fbb.addInt64(15, object.customerRef.targetId);
        fbb.addInt64(16, object.trip.targetId);
        fbb.addOffset(17, totalTimeOffset);
        fbb.addOffset(18, modeOfPaymentStringOffset);
        fbb.finish(fbb.endTable());
        return object.dbId;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final timeCompletedValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          28,
        );
        final idParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 6);
        final collectionIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final collectionNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final deliveryNumberParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final storeNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 14);
        final ownerNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 16);
        final contactNumberParam = const fb.ListReader<String>(
          fb.StringReader(asciiOptimization: true),
          lazy: false,
        ).vTableGetNullable(buffer, rootOffset, 18);
        final addressParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 20);
        final municipalityParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 22);
        final provinceParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 24);
        final modeOfPaymentParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 26);
        final timeCompletedParam =
            timeCompletedValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(timeCompletedValue);
        final totalAmountParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          30,
        );
        final totalTimeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 38);
        final modeOfPaymentStringParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 40);
        final object = CompletedCustomerEntity(
          id: idParam,
          collectionId: collectionIdParam,
          collectionName: collectionNameParam,
          deliveryNumber: deliveryNumberParam,
          storeName: storeNameParam,
          ownerName: ownerNameParam,
          contactNumber: contactNumberParam,
          address: addressParam,
          municipality: municipalityParam,
          province: provinceParam,
          modeOfPayment: modeOfPaymentParam,
          timeCompleted: timeCompletedParam,
          totalAmount: totalAmountParam,
          totalTime: totalTimeParam,
          modeOfPaymentString: modeOfPaymentStringParam,
        )..dbId = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        object.transactionRef.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          32,
          0,
        );
        object.transactionRef.attach(store);
        object.customerRef.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          34,
          0,
        );
        object.customerRef.attach(store);
        object.trip.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          36,
          0,
        );
        object.trip.attach(store);
        obx_int.InternalToManyAccess.setRelInfo<CompletedCustomerEntity>(
          object.invoices,
          store,
          obx_int.RelInfo<CompletedCustomerEntity>.toMany(24, object.dbId),
        );
        obx_int.InternalToManyAccess.setRelInfo<CompletedCustomerEntity>(
          object.deliveryStatus,
          store,
          obx_int.RelInfo<CompletedCustomerEntity>.toMany(25, object.dbId),
        );
        obx_int.InternalToManyAccess.setRelInfo<CompletedCustomerEntity>(
          object.returns,
          store,
          obx_int.RelInfo<CompletedCustomerEntity>.toMany(28, object.dbId),
        );
        return object;
      },
    ),
    UndeliverableCustomerModel:
        obx_int.EntityDefinition<UndeliverableCustomerModel>(
          model: _entities[29],
          toOneRelations: (UndeliverableCustomerModel object) => [],
          toManyRelations: (UndeliverableCustomerModel object) => {},
          getId: (UndeliverableCustomerModel object) => object.objectBoxId,
          setId: (UndeliverableCustomerModel object, int id) {
            object.objectBoxId = id;
          },
          objectToFB: (UndeliverableCustomerModel object, fb.Builder fbb) {
            final pocketbaseIdOffset = fbb.writeString(object.pocketbaseId);
            final tripIdOffset =
                object.tripId == null ? null : fbb.writeString(object.tripId!);
            final customerIdOffset =
                object.customerId == null
                    ? null
                    : fbb.writeString(object.customerId!);
            fbb.startTable(5);
            fbb.addInt64(0, object.objectBoxId);
            fbb.addOffset(1, pocketbaseIdOffset);
            fbb.addOffset(2, tripIdOffset);
            fbb.addOffset(3, customerIdOffset);
            fbb.finish(fbb.endTable());
            return object.objectBoxId;
          },
          objectFromFB: (obx.Store store, ByteData fbData) {
            final buffer = fb.BufferContext(fbData);
            final rootOffset = buffer.derefObject(0);

            final object =
                UndeliverableCustomerModel()
                  ..objectBoxId = const fb.Int64Reader().vTableGet(
                    buffer,
                    rootOffset,
                    4,
                    0,
                  )
                  ..pocketbaseId = const fb.StringReader(
                    asciiOptimization: true,
                  ).vTableGet(buffer, rootOffset, 6, '')
                  ..tripId = const fb.StringReader(
                    asciiOptimization: true,
                  ).vTableGetNullable(buffer, rootOffset, 8)
                  ..customerId = const fb.StringReader(
                    asciiOptimization: true,
                  ).vTableGetNullable(buffer, rootOffset, 10);

            return object;
          },
        ),
    EndChecklistEntity: obx_int.EntityDefinition<EndChecklistEntity>(
      model: _entities[30],
      toOneRelations: (EndChecklistEntity object) => [],
      toManyRelations: (EndChecklistEntity object) => {},
      getId: (EndChecklistEntity object) => object.dbId,
      setId: (EndChecklistEntity object, int id) {
        object.dbId = id;
      },
      objectToFB: (EndChecklistEntity object, fb.Builder fbb) {
        final idOffset = fbb.writeString(object.id);
        final objectNameOffset =
            object.objectName == null
                ? null
                : fbb.writeString(object.objectName!);
        final statusOffset =
            object.status == null ? null : fbb.writeString(object.status!);
        final tripOffset = fbb.writeString(object.trip);
        fbb.startTable(8);
        fbb.addInt64(0, object.dbId);
        fbb.addOffset(1, idOffset);
        fbb.addOffset(2, objectNameOffset);
        fbb.addBool(3, object.isChecked);
        fbb.addOffset(4, statusOffset);
        fbb.addInt64(5, object.timeCompleted?.millisecondsSinceEpoch);
        fbb.addOffset(6, tripOffset);
        fbb.finish(fbb.endTable());
        return object.dbId;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final timeCompletedValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          14,
        );
        final idParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final objectNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final isCheckedParam = const fb.BoolReader().vTableGetNullable(
          buffer,
          rootOffset,
          10,
        );
        final tripParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 16, '');
        final statusParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final timeCompletedParam =
            timeCompletedValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(timeCompletedValue);
        final object = EndChecklistEntity(
          id: idParam,
          objectName: objectNameParam,
          isChecked: isCheckedParam,
          trip: tripParam,
          status: statusParam,
          timeCompleted: timeCompletedParam,
        )..dbId = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

        return object;
      },
    ),
    EndTripChecklistModel: obx_int.EntityDefinition<EndTripChecklistModel>(
      model: _entities[31],
      toOneRelations: (EndTripChecklistModel object) => [],
      toManyRelations: (EndTripChecklistModel object) => {},
      getId: (EndTripChecklistModel object) => object.dbId,
      setId: (EndTripChecklistModel object, int id) {
        object.dbId = id;
      },
      objectToFB: (EndTripChecklistModel object, fb.Builder fbb) {
        final idOffset = fbb.writeString(object.id);
        final objectNameOffset = fbb.writeString(object.objectName);
        final statusOffset = fbb.writeString(object.status);
        final tripOffset = fbb.writeString(object.trip);
        fbb.startTable(7);
        fbb.addInt64(0, object.dbId);
        fbb.addOffset(1, idOffset);
        fbb.addOffset(2, objectNameOffset);
        fbb.addBool(3, object.isChecked);
        fbb.addOffset(4, statusOffset);
        fbb.addOffset(5, tripOffset);
        fbb.finish(fbb.endTable());
        return object.dbId;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final objectNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final isCheckedParam = const fb.BoolReader().vTableGetNullable(
          buffer,
          rootOffset,
          10,
        );
        final statusParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final tripParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final object = EndTripChecklistModel(
          id: idParam,
          objectName: objectNameParam,
          isChecked: isCheckedParam,
          status: statusParam,
          trip: tripParam,
        )..dbId = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

        return object;
      },
    ),
    UndeliverableCustomerEntity: obx_int.EntityDefinition<
      UndeliverableCustomerEntity
    >(
      model: _entities[32],
      toOneRelations:
          (UndeliverableCustomerEntity object) => [
            object.customerRef,
            object.tripRef,
          ],
      toManyRelations:
          (UndeliverableCustomerEntity object) => {
            obx_int.RelInfo<UndeliverableCustomerEntity>.toMany(
                  42,
                  object.dbId,
                ):
                object.invoices,
          },
      getId: (UndeliverableCustomerEntity object) => object.dbId,
      setId: (UndeliverableCustomerEntity object, int id) {
        object.dbId = id;
      },
      objectToFB: (UndeliverableCustomerEntity object, fb.Builder fbb) {
        final idOffset = object.id == null ? null : fbb.writeString(object.id!);
        final collectionIdOffset =
            object.collectionId == null
                ? null
                : fbb.writeString(object.collectionId!);
        final collectionNameOffset =
            object.collectionName == null
                ? null
                : fbb.writeString(object.collectionName!);
        final deliveryNumberOffset =
            object.deliveryNumber == null
                ? null
                : fbb.writeString(object.deliveryNumber!);
        final storeNameOffset =
            object.storeName == null
                ? null
                : fbb.writeString(object.storeName!);
        final ownerNameOffset =
            object.ownerName == null
                ? null
                : fbb.writeString(object.ownerName!);
        final contactNumberOffset =
            object.contactNumber == null
                ? null
                : fbb.writeList(
                  object.contactNumber!
                      .map(fbb.writeString)
                      .toList(growable: false),
                );
        final addressOffset =
            object.address == null ? null : fbb.writeString(object.address!);
        final municipalityOffset =
            object.municipality == null
                ? null
                : fbb.writeString(object.municipality!);
        final provinceOffset =
            object.province == null ? null : fbb.writeString(object.province!);
        final modeOfPaymentOffset =
            object.modeOfPayment == null
                ? null
                : fbb.writeString(object.modeOfPayment!);
        final customerImageOffset =
            object.customerImage == null
                ? null
                : fbb.writeString(object.customerImage!);
        fbb.startTable(19);
        fbb.addInt64(0, object.dbId);
        fbb.addOffset(1, idOffset);
        fbb.addOffset(2, collectionIdOffset);
        fbb.addOffset(3, collectionNameOffset);
        fbb.addOffset(4, deliveryNumberOffset);
        fbb.addOffset(5, storeNameOffset);
        fbb.addOffset(6, ownerNameOffset);
        fbb.addOffset(7, contactNumberOffset);
        fbb.addOffset(8, addressOffset);
        fbb.addOffset(9, municipalityOffset);
        fbb.addOffset(10, provinceOffset);
        fbb.addOffset(11, modeOfPaymentOffset);
        fbb.addInt64(12, object.time?.millisecondsSinceEpoch);
        fbb.addInt64(13, object.created?.millisecondsSinceEpoch);
        fbb.addInt64(14, object.updated?.millisecondsSinceEpoch);
        fbb.addOffset(15, customerImageOffset);
        fbb.addInt64(16, object.customerRef.targetId);
        fbb.addInt64(17, object.tripRef.targetId);
        fbb.finish(fbb.endTable());
        return object.dbId;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final timeValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          28,
        );
        final createdValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          30,
        );
        final updatedValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          32,
        );
        final idParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 6);
        final collectionIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final collectionNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final deliveryNumberParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final storeNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 14);
        final ownerNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 16);
        final contactNumberParam = const fb.ListReader<String>(
          fb.StringReader(asciiOptimization: true),
          lazy: false,
        ).vTableGetNullable(buffer, rootOffset, 18);
        final addressParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 20);
        final municipalityParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 22);
        final provinceParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 24);
        final modeOfPaymentParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 26);
        final timeParam =
            timeValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(timeValue);
        final createdParam =
            createdValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(createdValue);
        final updatedParam =
            updatedValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(updatedValue);
        final customerImageParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 34);
        final object = UndeliverableCustomerEntity(
          id: idParam,
          collectionId: collectionIdParam,
          collectionName: collectionNameParam,
          deliveryNumber: deliveryNumberParam,
          storeName: storeNameParam,
          ownerName: ownerNameParam,
          contactNumber: contactNumberParam,
          address: addressParam,
          municipality: municipalityParam,
          province: provinceParam,
          modeOfPayment: modeOfPaymentParam,
          time: timeParam,
          created: createdParam,
          updated: updatedParam,
          customerImage: customerImageParam,
        )..dbId = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        object.customerRef.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          36,
          0,
        );
        object.customerRef.attach(store);
        object.tripRef.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          38,
          0,
        );
        object.tripRef.attach(store);
        obx_int.InternalToManyAccess.setRelInfo<UndeliverableCustomerEntity>(
          object.invoices,
          store,
          obx_int.RelInfo<UndeliverableCustomerEntity>.toMany(42, object.dbId),
        );
        return object;
      },
    ),
    TripUpdateEntity: obx_int.EntityDefinition<TripUpdateEntity>(
      model: _entities[33],
      toOneRelations: (TripUpdateEntity object) => [object.trip],
      toManyRelations: (TripUpdateEntity object) => {},
      getId: (TripUpdateEntity object) => object.dbId,
      setId: (TripUpdateEntity object, int id) {
        object.dbId = id;
      },
      objectToFB: (TripUpdateEntity object, fb.Builder fbb) {
        final idOffset = object.id == null ? null : fbb.writeString(object.id!);
        final collectionIdOffset =
            object.collectionId == null
                ? null
                : fbb.writeString(object.collectionId!);
        final collectionNameOffset =
            object.collectionName == null
                ? null
                : fbb.writeString(object.collectionName!);
        final imageOffset =
            object.image == null ? null : fbb.writeString(object.image!);
        final descriptionOffset =
            object.description == null
                ? null
                : fbb.writeString(object.description!);
        final latitudeOffset =
            object.latitude == null ? null : fbb.writeString(object.latitude!);
        final longitudeOffset =
            object.longitude == null
                ? null
                : fbb.writeString(object.longitude!);
        fbb.startTable(11);
        fbb.addInt64(0, object.dbId);
        fbb.addOffset(1, idOffset);
        fbb.addOffset(2, collectionIdOffset);
        fbb.addOffset(3, collectionNameOffset);
        fbb.addInt64(4, object.date?.millisecondsSinceEpoch);
        fbb.addOffset(5, imageOffset);
        fbb.addOffset(6, descriptionOffset);
        fbb.addOffset(7, latitudeOffset);
        fbb.addOffset(8, longitudeOffset);
        fbb.addInt64(9, object.trip.targetId);
        fbb.finish(fbb.endTable());
        return object.dbId;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final dateValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          12,
        );
        final idParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 6);
        final collectionIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final collectionNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final dateParam =
            dateValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(dateValue);
        final imageParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 14);
        final descriptionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 16);
        final latitudeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 18);
        final longitudeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 20);
        final object = TripUpdateEntity(
          id: idParam,
          collectionId: collectionIdParam,
          collectionName: collectionNameParam,
          date: dateParam,
          image: imageParam,
          description: descriptionParam,
          latitude: latitudeParam,
          longitude: longitudeParam,
        )..dbId = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        object.trip.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          22,
          0,
        );
        object.trip.attach(store);
        return object;
      },
    ),
    TripUpdateModel: obx_int.EntityDefinition<TripUpdateModel>(
      model: _entities[34],
      toOneRelations: (TripUpdateModel object) => [],
      toManyRelations: (TripUpdateModel object) => {},
      getId: (TripUpdateModel object) => object.objectBoxId,
      setId: (TripUpdateModel object, int id) {
        object.objectBoxId = id;
      },
      objectToFB: (TripUpdateModel object, fb.Builder fbb) {
        final pocketbaseIdOffset = fbb.writeString(object.pocketbaseId);
        final tripIdOffset =
            object.tripId == null ? null : fbb.writeString(object.tripId!);
        fbb.startTable(4);
        fbb.addInt64(0, object.objectBoxId);
        fbb.addOffset(1, pocketbaseIdOffset);
        fbb.addOffset(2, tripIdOffset);
        fbb.finish(fbb.endTable());
        return object.objectBoxId;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final tripIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final object =
            TripUpdateModel(tripId: tripIdParam)
              ..objectBoxId = const fb.Int64Reader().vTableGet(
                buffer,
                rootOffset,
                4,
                0,
              )
              ..pocketbaseId = const fb.StringReader(
                asciiOptimization: true,
              ).vTableGet(buffer, rootOffset, 6, '');

        return object;
      },
    ),
    EndTripOtpModel: obx_int.EntityDefinition<EndTripOtpModel>(
      model: _entities[35],
      toOneRelations: (EndTripOtpModel object) => [object.trip],
      toManyRelations: (EndTripOtpModel object) => {},
      getId: (EndTripOtpModel object) => object.dbId,
      setId: (EndTripOtpModel object, int id) {
        object.dbId = id;
      },
      objectToFB: (EndTripOtpModel object, fb.Builder fbb) {
        final idOffset = fbb.writeString(object.id);
        final otpCodeOffset = fbb.writeString(object.otpCode);
        final generatedCodeOffset =
            object.generatedCode == null
                ? null
                : fbb.writeString(object.generatedCode!);
        fbb.startTable(10);
        fbb.addInt64(0, object.dbId);
        fbb.addOffset(1, idOffset);
        fbb.addOffset(2, otpCodeOffset);
        fbb.addOffset(3, generatedCodeOffset);
        fbb.addBool(4, object.isVerified);
        fbb.addInt64(5, object.createdAt.millisecondsSinceEpoch);
        fbb.addInt64(6, object.expiresAt.millisecondsSinceEpoch);
        fbb.addInt64(7, object.verifiedAt?.millisecondsSinceEpoch);
        fbb.addInt64(8, object.trip.targetId);
        fbb.finish(fbb.endTable());
        return object.dbId;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final verifiedAtValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          18,
        );
        final idParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final otpCodeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final generatedCodeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final isVerifiedParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          12,
          false,
        );
        final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0),
        );
        final expiresAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0),
        );
        final verifiedAtParam =
            verifiedAtValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(verifiedAtValue);
        final object = EndTripOtpModel(
          id: idParam,
          otpCode: otpCodeParam,
          generatedCode: generatedCodeParam,
          isVerified: isVerifiedParam,
          createdAt: createdAtParam,
          expiresAt: expiresAtParam,
          verifiedAt: verifiedAtParam,
        )..dbId = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        object.trip.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          20,
          0,
        );
        object.trip.attach(store);
        return object;
      },
    ),
    EndTripOtpEntity: obx_int.EntityDefinition<EndTripOtpEntity>(
      model: _entities[36],
      toOneRelations: (EndTripOtpEntity object) => [object.trip],
      toManyRelations: (EndTripOtpEntity object) => {},
      getId: (EndTripOtpEntity object) => object.dbId,
      setId: (EndTripOtpEntity object, int id) {
        object.dbId = id;
      },
      objectToFB: (EndTripOtpEntity object, fb.Builder fbb) {
        final idOffset = fbb.writeString(object.id);
        final otpCodeOffset = fbb.writeString(object.otpCode);
        final generatedCodeOffset =
            object.generatedCode == null
                ? null
                : fbb.writeString(object.generatedCode!);
        final endTripOdometerOffset =
            object.endTripOdometer == null
                ? null
                : fbb.writeString(object.endTripOdometer!);
        fbb.startTable(11);
        fbb.addInt64(0, object.dbId);
        fbb.addOffset(1, idOffset);
        fbb.addOffset(2, otpCodeOffset);
        fbb.addOffset(3, generatedCodeOffset);
        fbb.addBool(4, object.isVerified);
        fbb.addInt64(5, object.createdAt.millisecondsSinceEpoch);
        fbb.addInt64(6, object.expiresAt.millisecondsSinceEpoch);
        fbb.addInt64(7, object.verifiedAt?.millisecondsSinceEpoch);
        fbb.addInt64(8, object.trip.targetId);
        fbb.addOffset(9, endTripOdometerOffset);
        fbb.finish(fbb.endTable());
        return object.dbId;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final verifiedAtValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          18,
        );
        final idParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final otpCodeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final endTripOdometerParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 22);
        final generatedCodeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final isVerifiedParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          12,
          false,
        );
        final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0),
        );
        final expiresAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0),
        );
        final verifiedAtParam =
            verifiedAtValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(verifiedAtValue);
        final object = EndTripOtpEntity(
          id: idParam,
          otpCode: otpCodeParam,
          endTripOdometer: endTripOdometerParam,
          generatedCode: generatedCodeParam,
          isVerified: isVerifiedParam,
          createdAt: createdAtParam,
          expiresAt: expiresAtParam,
          verifiedAt: verifiedAtParam,
        )..dbId = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        object.trip.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          20,
          0,
        );
        object.trip.attach(store);
        return object;
      },
    ),
    OtpEntity: obx_int.EntityDefinition<OtpEntity>(
      model: _entities[37],
      toOneRelations: (OtpEntity object) => [object.trip],
      toManyRelations: (OtpEntity object) => {},
      getId: (OtpEntity object) => object.dbId,
      setId: (OtpEntity object, int id) {
        object.dbId = id;
      },
      objectToFB: (OtpEntity object, fb.Builder fbb) {
        final idOffset = fbb.writeString(object.id);
        final otpCodeOffset = fbb.writeString(object.otpCode);
        final generatedCodeOffset =
            object.generatedCode == null
                ? null
                : fbb.writeString(object.generatedCode!);
        final intransitOdometerOffset =
            object.intransitOdometer == null
                ? null
                : fbb.writeString(object.intransitOdometer!);
        fbb.startTable(11);
        fbb.addInt64(0, object.dbId);
        fbb.addOffset(1, idOffset);
        fbb.addOffset(2, otpCodeOffset);
        fbb.addOffset(3, generatedCodeOffset);
        fbb.addBool(4, object.isVerified);
        fbb.addInt64(5, object.createdAt.millisecondsSinceEpoch);
        fbb.addInt64(6, object.expiresAt.millisecondsSinceEpoch);
        fbb.addInt64(7, object.verifiedAt?.millisecondsSinceEpoch);
        fbb.addInt64(8, object.trip.targetId);
        fbb.addOffset(9, intransitOdometerOffset);
        fbb.finish(fbb.endTable());
        return object.dbId;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final verifiedAtValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          18,
        );
        final idParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final otpCodeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final generatedCodeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final intransitOdometerParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 22);
        final isVerifiedParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          12,
          false,
        );
        final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0),
        );
        final expiresAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0),
        );
        final verifiedAtParam =
            verifiedAtValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(verifiedAtValue);
        final object = OtpEntity(
          id: idParam,
          otpCode: otpCodeParam,
          generatedCode: generatedCodeParam,
          intransitOdometer: intransitOdometerParam,
          isVerified: isVerifiedParam,
          createdAt: createdAtParam,
          expiresAt: expiresAtParam,
          verifiedAt: verifiedAtParam,
        )..dbId = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        object.trip.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          20,
          0,
        );
        object.trip.attach(store);
        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [LocalUser] entity fields to define ObjectBox queries.
class LocalUser_ {
  /// See [LocalUser.dbId].
  static final dbId = obx.QueryIntegerProperty<LocalUser>(
    _entities[0].properties[0],
  );

  /// See [LocalUser.email].
  static final email = obx.QueryStringProperty<LocalUser>(
    _entities[0].properties[1],
  );

  /// See [LocalUser.profilePic].
  static final profilePic = obx.QueryStringProperty<LocalUser>(
    _entities[0].properties[2],
  );

  /// See [LocalUser.name].
  static final name = obx.QueryStringProperty<LocalUser>(
    _entities[0].properties[3],
  );

  /// See [LocalUser.tripNumberId].
  static final tripNumberId = obx.QueryStringProperty<LocalUser>(
    _entities[0].properties[4],
  );

  /// See [LocalUser.id].
  static final id = obx.QueryStringProperty<LocalUser>(
    _entities[0].properties[5],
  );

  /// See [LocalUser.collectionId].
  static final collectionId = obx.QueryStringProperty<LocalUser>(
    _entities[0].properties[6],
  );

  /// See [LocalUser.collectionName].
  static final collectionName = obx.QueryStringProperty<LocalUser>(
    _entities[0].properties[7],
  );

  /// See [LocalUser.trip].
  static final trip = obx.QueryRelationToOne<LocalUser, TripModel>(
    _entities[0].properties[8],
  );

  /// See [LocalUser.deliveryTeam].
  static final deliveryTeam =
      obx.QueryRelationToOne<LocalUser, DeliveryTeamModel>(
        _entities[0].properties[9],
      );

  /// See [LocalUser.token].
  static final token = obx.QueryStringProperty<LocalUser>(
    _entities[0].properties[10],
  );
}

/// [ChecklistEntity] entity fields to define ObjectBox queries.
class ChecklistEntity_ {
  /// See [ChecklistEntity.dbId].
  static final dbId = obx.QueryIntegerProperty<ChecklistEntity>(
    _entities[1].properties[0],
  );

  /// See [ChecklistEntity.id].
  static final id = obx.QueryStringProperty<ChecklistEntity>(
    _entities[1].properties[1],
  );

  /// See [ChecklistEntity.objectName].
  static final objectName = obx.QueryStringProperty<ChecklistEntity>(
    _entities[1].properties[2],
  );

  /// See [ChecklistEntity.isChecked].
  static final isChecked = obx.QueryBooleanProperty<ChecklistEntity>(
    _entities[1].properties[3],
  );

  /// See [ChecklistEntity.status].
  static final status = obx.QueryStringProperty<ChecklistEntity>(
    _entities[1].properties[4],
  );

  /// See [ChecklistEntity.timeCompleted].
  static final timeCompleted = obx.QueryDateProperty<ChecklistEntity>(
    _entities[1].properties[5],
  );

  /// See [ChecklistEntity.trip].
  static final trip = obx.QueryRelationToOne<ChecklistEntity, TripModel>(
    _entities[1].properties[6],
  );
}

/// [ChecklistModel] entity fields to define ObjectBox queries.
class ChecklistModel_ {
  /// See [ChecklistModel.objectBoxId].
  static final objectBoxId = obx.QueryIntegerProperty<ChecklistModel>(
    _entities[2].properties[0],
  );

  /// See [ChecklistModel.tripId].
  static final tripId = obx.QueryStringProperty<ChecklistModel>(
    _entities[2].properties[1],
  );

  /// See [ChecklistModel.pocketBaseId].
  static final pocketBaseId = obx.QueryStringProperty<ChecklistModel>(
    _entities[2].properties[2],
  );

  /// See [ChecklistModel.isChecked].
  static final isChecked = obx.QueryBooleanProperty<ChecklistModel>(
    _entities[2].properties[3],
  );
}

/// [CustomerEntity] entity fields to define ObjectBox queries.
class CustomerEntity_ {
  /// See [CustomerEntity.dbId].
  static final dbId = obx.QueryIntegerProperty<CustomerEntity>(
    _entities[3].properties[0],
  );

  /// See [CustomerEntity.id].
  static final id = obx.QueryStringProperty<CustomerEntity>(
    _entities[3].properties[1],
  );

  /// See [CustomerEntity.collectionId].
  static final collectionId = obx.QueryStringProperty<CustomerEntity>(
    _entities[3].properties[2],
  );

  /// See [CustomerEntity.collectionName].
  static final collectionName = obx.QueryStringProperty<CustomerEntity>(
    _entities[3].properties[3],
  );

  /// See [CustomerEntity.deliveryNumber].
  static final deliveryNumber = obx.QueryStringProperty<CustomerEntity>(
    _entities[3].properties[4],
  );

  /// See [CustomerEntity.storeName].
  static final storeName = obx.QueryStringProperty<CustomerEntity>(
    _entities[3].properties[5],
  );

  /// See [CustomerEntity.ownerName].
  static final ownerName = obx.QueryStringProperty<CustomerEntity>(
    _entities[3].properties[6],
  );

  /// See [CustomerEntity.contactNumber].
  static final contactNumber = obx.QueryStringVectorProperty<CustomerEntity>(
    _entities[3].properties[7],
  );

  /// See [CustomerEntity.address].
  static final address = obx.QueryStringProperty<CustomerEntity>(
    _entities[3].properties[8],
  );

  /// See [CustomerEntity.municipality].
  static final municipality = obx.QueryStringProperty<CustomerEntity>(
    _entities[3].properties[9],
  );

  /// See [CustomerEntity.province].
  static final province = obx.QueryStringProperty<CustomerEntity>(
    _entities[3].properties[10],
  );

  /// See [CustomerEntity.modeOfPayment].
  static final modeOfPayment = obx.QueryStringProperty<CustomerEntity>(
    _entities[3].properties[11],
  );

  /// See [CustomerEntity.numberOfInvoices].
  static final numberOfInvoices = obx.QueryIntegerProperty<CustomerEntity>(
    _entities[3].properties[12],
  );

  /// See [CustomerEntity.totalAmount].
  static final totalAmount = obx.QueryDoubleProperty<CustomerEntity>(
    _entities[3].properties[13],
  );

  /// See [CustomerEntity.latitude].
  static final latitude = obx.QueryStringProperty<CustomerEntity>(
    _entities[3].properties[14],
  );

  /// See [CustomerEntity.longitude].
  static final longitude = obx.QueryStringProperty<CustomerEntity>(
    _entities[3].properties[15],
  );

  /// See [CustomerEntity.created].
  static final created = obx.QueryDateProperty<CustomerEntity>(
    _entities[3].properties[16],
  );

  /// See [CustomerEntity.updated].
  static final updated = obx.QueryDateProperty<CustomerEntity>(
    _entities[3].properties[17],
  );

  /// See [CustomerEntity.trip].
  static final trip = obx.QueryRelationToOne<CustomerEntity, TripModel>(
    _entities[3].properties[18],
  );

  /// See [CustomerEntity.totalTime].
  static final totalTime = obx.QueryStringProperty<CustomerEntity>(
    _entities[3].properties[19],
  );

  /// See [CustomerEntity.notes].
  static final notes = obx.QueryStringProperty<CustomerEntity>(
    _entities[3].properties[20],
  );

  /// See [CustomerEntity.remarks].
  static final remarks = obx.QueryStringProperty<CustomerEntity>(
    _entities[3].properties[21],
  );

  /// See [CustomerEntity.modeOfPaymentString].
  static final modeOfPaymentString = obx.QueryStringProperty<CustomerEntity>(
    _entities[3].properties[22],
  );

  /// See [CustomerEntity.hasNotes].
  static final hasNotes = obx.QueryBooleanProperty<CustomerEntity>(
    _entities[3].properties[23],
  );

  /// See [CustomerEntity.confirmedTotalPayment].
  static final confirmedTotalPayment = obx.QueryDoubleProperty<CustomerEntity>(
    _entities[3].properties[24],
  );

  /// see [CustomerEntity.deliveryStatus]
  static final deliveryStatus =
      obx.QueryRelationToMany<CustomerEntity, DeliveryUpdateModel>(
        _entities[3].relations[0],
      );

  /// see [CustomerEntity.invoices]
  static final invoices = obx.QueryRelationToMany<CustomerEntity, InvoiceModel>(
    _entities[3].relations[1],
  );

  /// see [CustomerEntity.transactions]
  static final transactions =
      obx.QueryRelationToMany<CustomerEntity, TransactionModel>(
        _entities[3].relations[2],
      );

  /// see [CustomerEntity.returns]
  static final returns = obx.QueryRelationToMany<CustomerEntity, ReturnModel>(
    _entities[3].relations[3],
  );
}

/// [CustomerModel] entity fields to define ObjectBox queries.
class CustomerModel_ {
  /// See [CustomerModel.objectBoxId].
  static final objectBoxId = obx.QueryIntegerProperty<CustomerModel>(
    _entities[4].properties[0],
  );

  /// See [CustomerModel.pocketbaseId].
  static final pocketbaseId = obx.QueryStringProperty<CustomerModel>(
    _entities[4].properties[1],
  );

  /// See [CustomerModel.tripId].
  static final tripId = obx.QueryStringProperty<CustomerModel>(
    _entities[4].properties[2],
  );
}

/// [DeliveryUpdateEntity] entity fields to define ObjectBox queries.
class DeliveryUpdateEntity_ {
  /// See [DeliveryUpdateEntity.dbId].
  static final dbId = obx.QueryIntegerProperty<DeliveryUpdateEntity>(
    _entities[5].properties[0],
  );

  /// See [DeliveryUpdateEntity.id].
  static final id = obx.QueryStringProperty<DeliveryUpdateEntity>(
    _entities[5].properties[1],
  );

  /// See [DeliveryUpdateEntity.collectionId].
  static final collectionId = obx.QueryStringProperty<DeliveryUpdateEntity>(
    _entities[5].properties[2],
  );

  /// See [DeliveryUpdateEntity.collectionName].
  static final collectionName = obx.QueryStringProperty<DeliveryUpdateEntity>(
    _entities[5].properties[3],
  );

  /// See [DeliveryUpdateEntity.title].
  static final title = obx.QueryStringProperty<DeliveryUpdateEntity>(
    _entities[5].properties[4],
  );

  /// See [DeliveryUpdateEntity.subtitle].
  static final subtitle = obx.QueryStringProperty<DeliveryUpdateEntity>(
    _entities[5].properties[5],
  );

  /// See [DeliveryUpdateEntity.time].
  static final time = obx.QueryDateProperty<DeliveryUpdateEntity>(
    _entities[5].properties[6],
  );

  /// See [DeliveryUpdateEntity.created].
  static final created = obx.QueryDateProperty<DeliveryUpdateEntity>(
    _entities[5].properties[7],
  );

  /// See [DeliveryUpdateEntity.updated].
  static final updated = obx.QueryDateProperty<DeliveryUpdateEntity>(
    _entities[5].properties[8],
  );

  /// See [DeliveryUpdateEntity.customer].
  static final customer = obx.QueryStringProperty<DeliveryUpdateEntity>(
    _entities[5].properties[9],
  );

  /// See [DeliveryUpdateEntity.isAssigned].
  static final isAssigned = obx.QueryBooleanProperty<DeliveryUpdateEntity>(
    _entities[5].properties[10],
  );

  /// See [DeliveryUpdateEntity.assignedTo].
  static final assignedTo = obx.QueryStringProperty<DeliveryUpdateEntity>(
    _entities[5].properties[11],
  );

  /// See [DeliveryUpdateEntity.image].
  static final image = obx.QueryStringProperty<DeliveryUpdateEntity>(
    _entities[5].properties[12],
  );

  /// See [DeliveryUpdateEntity.remarks].
  static final remarks = obx.QueryStringProperty<DeliveryUpdateEntity>(
    _entities[5].properties[13],
  );

  /// see [DeliveryUpdateEntity.customers]
  static final customers =
      obx.QueryRelationToMany<DeliveryUpdateEntity, CustomerModel>(
        _entities[5].relations[0],
      );
}

/// [DeliveryUpdateModel] entity fields to define ObjectBox queries.
class DeliveryUpdateModel_ {
  /// See [DeliveryUpdateModel.objectBoxId].
  static final objectBoxId = obx.QueryIntegerProperty<DeliveryUpdateModel>(
    _entities[6].properties[0],
  );

  /// See [DeliveryUpdateModel.pocketbaseId].
  static final pocketbaseId = obx.QueryStringProperty<DeliveryUpdateModel>(
    _entities[6].properties[1],
  );

  /// See [DeliveryUpdateModel.customer].
  static final customer = obx.QueryStringProperty<DeliveryUpdateModel>(
    _entities[6].properties[2],
  );
}

/// [InvoiceEntity] entity fields to define ObjectBox queries.
class InvoiceEntity_ {
  /// See [InvoiceEntity.dbId].
  static final dbId = obx.QueryIntegerProperty<InvoiceEntity>(
    _entities[7].properties[0],
  );

  /// See [InvoiceEntity.id].
  static final id = obx.QueryStringProperty<InvoiceEntity>(
    _entities[7].properties[1],
  );

  /// See [InvoiceEntity.collectionId].
  static final collectionId = obx.QueryStringProperty<InvoiceEntity>(
    _entities[7].properties[2],
  );

  /// See [InvoiceEntity.collectionName].
  static final collectionName = obx.QueryStringProperty<InvoiceEntity>(
    _entities[7].properties[3],
  );

  /// See [InvoiceEntity.invoiceNumber].
  static final invoiceNumber = obx.QueryStringProperty<InvoiceEntity>(
    _entities[7].properties[4],
  );

  /// See [InvoiceEntity.created].
  static final created = obx.QueryDateProperty<InvoiceEntity>(
    _entities[7].properties[5],
  );

  /// See [InvoiceEntity.updated].
  static final updated = obx.QueryDateProperty<InvoiceEntity>(
    _entities[7].properties[6],
  );

  /// See [InvoiceEntity.customerDeliveryStatus].
  static final customerDeliveryStatus = obx.QueryStringProperty<InvoiceEntity>(
    _entities[7].properties[7],
  );

  /// See [InvoiceEntity.totalAmount].
  static final totalAmount = obx.QueryDoubleProperty<InvoiceEntity>(
    _entities[7].properties[8],
  );

  /// See [InvoiceEntity.confirmTotalAmount].
  static final confirmTotalAmount = obx.QueryDoubleProperty<InvoiceEntity>(
    _entities[7].properties[9],
  );

  /// See [InvoiceEntity.customer].
  static final customer = obx.QueryRelationToOne<InvoiceEntity, CustomerModel>(
    _entities[7].properties[10],
  );

  /// See [InvoiceEntity.trip].
  static final trip = obx.QueryRelationToOne<InvoiceEntity, TripModel>(
    _entities[7].properties[11],
  );

  /// See [InvoiceEntity.isCompleted].
  static final isCompleted = obx.QueryBooleanProperty<InvoiceEntity>(
    _entities[7].properties[12],
  );

  /// see [InvoiceEntity.productList]
  static final productList =
      obx.QueryRelationToMany<InvoiceEntity, ProductModel>(
        _entities[7].relations[0],
      );
}

/// [InvoiceModel] entity fields to define ObjectBox queries.
class InvoiceModel_ {
  /// See [InvoiceModel.objectBoxId].
  static final objectBoxId = obx.QueryIntegerProperty<InvoiceModel>(
    _entities[8].properties[0],
  );

  /// See [InvoiceModel.pocketbaseId].
  static final pocketbaseId = obx.QueryStringProperty<InvoiceModel>(
    _entities[8].properties[1],
  );

  /// See [InvoiceModel.customerId].
  static final customerId = obx.QueryStringProperty<InvoiceModel>(
    _entities[8].properties[2],
  );

  /// See [InvoiceModel.tripId].
  static final tripId = obx.QueryStringProperty<InvoiceModel>(
    _entities[8].properties[3],
  );
}

/// [PersonelEntity] entity fields to define ObjectBox queries.
class PersonelEntity_ {
  /// See [PersonelEntity.dbId].
  static final dbId = obx.QueryIntegerProperty<PersonelEntity>(
    _entities[9].properties[0],
  );

  /// See [PersonelEntity.id].
  static final id = obx.QueryStringProperty<PersonelEntity>(
    _entities[9].properties[1],
  );

  /// See [PersonelEntity.collectionId].
  static final collectionId = obx.QueryStringProperty<PersonelEntity>(
    _entities[9].properties[2],
  );

  /// See [PersonelEntity.collectionName].
  static final collectionName = obx.QueryStringProperty<PersonelEntity>(
    _entities[9].properties[3],
  );

  /// See [PersonelEntity.name].
  static final name = obx.QueryStringProperty<PersonelEntity>(
    _entities[9].properties[4],
  );

  /// See [PersonelEntity.created].
  static final created = obx.QueryDateProperty<PersonelEntity>(
    _entities[9].properties[5],
  );

  /// See [PersonelEntity.updated].
  static final updated = obx.QueryDateProperty<PersonelEntity>(
    _entities[9].properties[6],
  );

  /// See [PersonelEntity.deliveryTeam].
  static final deliveryTeam =
      obx.QueryRelationToOne<PersonelEntity, DeliveryTeamModel>(
        _entities[9].properties[7],
      );

  /// See [PersonelEntity.trip].
  static final trip = obx.QueryRelationToOne<PersonelEntity, TripModel>(
    _entities[9].properties[8],
  );
}

/// [PersonelModel] entity fields to define ObjectBox queries.
class PersonelModel_ {
  /// See [PersonelModel.objectBoxId].
  static final objectBoxId = obx.QueryIntegerProperty<PersonelModel>(
    _entities[10].properties[0],
  );

  /// See [PersonelModel.pocketbaseId].
  static final pocketbaseId = obx.QueryStringProperty<PersonelModel>(
    _entities[10].properties[1],
  );

  /// See [PersonelModel.tripId].
  static final tripId = obx.QueryStringProperty<PersonelModel>(
    _entities[10].properties[2],
  );

  /// See [PersonelModel.deliveryTeamId].
  static final deliveryTeamId = obx.QueryStringProperty<PersonelModel>(
    _entities[10].properties[3],
  );
}

/// [ProductEntity] entity fields to define ObjectBox queries.
class ProductEntity_ {
  /// See [ProductEntity.dbId].
  static final dbId = obx.QueryIntegerProperty<ProductEntity>(
    _entities[11].properties[0],
  );

  /// See [ProductEntity.id].
  static final id = obx.QueryStringProperty<ProductEntity>(
    _entities[11].properties[1],
  );

  /// See [ProductEntity.name].
  static final name = obx.QueryStringProperty<ProductEntity>(
    _entities[11].properties[2],
  );

  /// See [ProductEntity.description].
  static final description = obx.QueryStringProperty<ProductEntity>(
    _entities[11].properties[3],
  );

  /// See [ProductEntity.image].
  static final image = obx.QueryStringProperty<ProductEntity>(
    _entities[11].properties[4],
  );

  /// See [ProductEntity.pricePerPc].
  static final pricePerPc = obx.QueryDoubleProperty<ProductEntity>(
    _entities[11].properties[5],
  );

  /// See [ProductEntity.totalAmount].
  static final totalAmount = obx.QueryDoubleProperty<ProductEntity>(
    _entities[11].properties[6],
  );

  /// See [ProductEntity.pricePerCase].
  static final pricePerCase = obx.QueryDoubleProperty<ProductEntity>(
    _entities[11].properties[7],
  );

  /// See [ProductEntity.invoice].
  static final invoice = obx.QueryRelationToOne<ProductEntity, InvoiceModel>(
    _entities[11].properties[8],
  );

  /// See [ProductEntity.customer].
  static final customer = obx.QueryRelationToOne<ProductEntity, CustomerModel>(
    _entities[11].properties[9],
  );

  /// See [ProductEntity.isCase].
  static final isCase = obx.QueryBooleanProperty<ProductEntity>(
    _entities[11].properties[10],
  );

  /// See [ProductEntity.isPc].
  static final isPc = obx.QueryBooleanProperty<ProductEntity>(
    _entities[11].properties[11],
  );

  /// See [ProductEntity.isPack].
  static final isPack = obx.QueryBooleanProperty<ProductEntity>(
    _entities[11].properties[12],
  );

  /// See [ProductEntity.isBox].
  static final isBox = obx.QueryBooleanProperty<ProductEntity>(
    _entities[11].properties[13],
  );

  /// See [ProductEntity.unloadedProductCase].
  static final unloadedProductCase = obx.QueryIntegerProperty<ProductEntity>(
    _entities[11].properties[14],
  );

  /// See [ProductEntity.unloadedProductPc].
  static final unloadedProductPc = obx.QueryIntegerProperty<ProductEntity>(
    _entities[11].properties[15],
  );

  /// See [ProductEntity.unloadedProductPack].
  static final unloadedProductPack = obx.QueryIntegerProperty<ProductEntity>(
    _entities[11].properties[16],
  );

  /// See [ProductEntity.unloadedProductBox].
  static final unloadedProductBox = obx.QueryIntegerProperty<ProductEntity>(
    _entities[11].properties[17],
  );

  /// See [ProductEntity.case_].
  static final case_ = obx.QueryIntegerProperty<ProductEntity>(
    _entities[11].properties[18],
  );

  /// See [ProductEntity.pcs].
  static final pcs = obx.QueryIntegerProperty<ProductEntity>(
    _entities[11].properties[19],
  );

  /// See [ProductEntity.pack].
  static final pack = obx.QueryIntegerProperty<ProductEntity>(
    _entities[11].properties[20],
  );

  /// See [ProductEntity.box].
  static final box = obx.QueryIntegerProperty<ProductEntity>(
    _entities[11].properties[21],
  );

  /// See [ProductEntity.hasReturn].
  static final hasReturn = obx.QueryBooleanProperty<ProductEntity>(
    _entities[11].properties[22],
  );
}

/// [ProductModel] entity fields to define ObjectBox queries.
class ProductModel_ {
  /// See [ProductModel.pocketbaseId].
  static final pocketbaseId = obx.QueryStringProperty<ProductModel>(
    _entities[12].properties[0],
  );

  /// See [ProductModel.objectBoxId].
  static final objectBoxId = obx.QueryIntegerProperty<ProductModel>(
    _entities[12].properties[1],
  );

  /// See [ProductModel.invoiceId].
  static final invoiceId = obx.QueryStringProperty<ProductModel>(
    _entities[12].properties[2],
  );

  /// See [ProductModel.customerId].
  static final customerId = obx.QueryStringProperty<ProductModel>(
    _entities[12].properties[3],
  );
}

/// [TripEntity] entity fields to define ObjectBox queries.
class TripEntity_ {
  /// See [TripEntity.dbId].
  static final dbId = obx.QueryIntegerProperty<TripEntity>(
    _entities[13].properties[0],
  );

  /// See [TripEntity.id].
  static final id = obx.QueryStringProperty<TripEntity>(
    _entities[13].properties[1],
  );

  /// See [TripEntity.collectionId].
  static final collectionId = obx.QueryStringProperty<TripEntity>(
    _entities[13].properties[2],
  );

  /// See [TripEntity.collectionName].
  static final collectionName = obx.QueryStringProperty<TripEntity>(
    _entities[13].properties[3],
  );

  /// See [TripEntity.tripNumberId].
  static final tripNumberId = obx.QueryStringProperty<TripEntity>(
    _entities[13].properties[4],
  );

  /// See [TripEntity.timeline].
  static final timeline =
      obx.QueryRelationToOne<TripEntity, UpdateTimelineModel>(
        _entities[13].properties[5],
      );

  /// See [TripEntity.isAccepted].
  static final isAccepted = obx.QueryBooleanProperty<TripEntity>(
    _entities[13].properties[6],
  );

  /// See [TripEntity.created].
  static final created = obx.QueryDateProperty<TripEntity>(
    _entities[13].properties[7],
  );

  /// See [TripEntity.updated].
  static final updated = obx.QueryDateProperty<TripEntity>(
    _entities[13].properties[8],
  );

  /// See [TripEntity.timeAccepted].
  static final timeAccepted = obx.QueryDateProperty<TripEntity>(
    _entities[13].properties[9],
  );

  /// See [TripEntity.deliveryTeam].
  static final deliveryTeam =
      obx.QueryRelationToOne<TripEntity, DeliveryTeamModel>(
        _entities[13].properties[10],
      );

  /// See [TripEntity.otp].
  static final otp = obx.QueryRelationToOne<TripEntity, OtpModel>(
    _entities[13].properties[11],
  );

  /// See [TripEntity.endTripOtp].
  static final endTripOtp = obx.QueryRelationToOne<TripEntity, EndTripOtpModel>(
    _entities[13].properties[12],
  );

  /// See [TripEntity.isEndTrip].
  static final isEndTrip = obx.QueryBooleanProperty<TripEntity>(
    _entities[13].properties[13],
  );

  /// See [TripEntity.timeEndTrip].
  static final timeEndTrip = obx.QueryDateProperty<TripEntity>(
    _entities[13].properties[14],
  );

  /// See [TripEntity.totalTripDistance].
  static final totalTripDistance = obx.QueryStringProperty<TripEntity>(
    _entities[13].properties[15],
  );

  /// See [TripEntity.qrCode].
  static final qrCode = obx.QueryStringProperty<TripEntity>(
    _entities[13].properties[16],
  );

  /// See [TripEntity.user].
  static final user = obx.QueryRelationToOne<TripEntity, LocalUsersModel>(
    _entities[13].properties[17],
  );

  /// See [TripEntity.latitude].
  static final latitude = obx.QueryDoubleProperty<TripEntity>(
    _entities[13].properties[18],
  );

  /// See [TripEntity.longitude].
  static final longitude = obx.QueryDoubleProperty<TripEntity>(
    _entities[13].properties[19],
  );

  /// see [TripEntity.customers]
  static final customers = obx.QueryRelationToMany<TripEntity, CustomerModel>(
    _entities[13].relations[0],
  );

  /// see [TripEntity.personels]
  static final personels = obx.QueryRelationToMany<TripEntity, PersonelModel>(
    _entities[13].relations[1],
  );

  /// see [TripEntity.checklist]
  static final checklist = obx.QueryRelationToMany<TripEntity, ChecklistModel>(
    _entities[13].relations[2],
  );

  /// see [TripEntity.vehicle]
  static final vehicle = obx.QueryRelationToMany<TripEntity, VehicleModel>(
    _entities[13].relations[3],
  );

  /// see [TripEntity.completedCustomers]
  static final completedCustomers =
      obx.QueryRelationToMany<TripEntity, CompletedCustomerModel>(
        _entities[13].relations[4],
      );

  /// see [TripEntity.returns]
  static final returns = obx.QueryRelationToMany<TripEntity, ReturnModel>(
    _entities[13].relations[5],
  );

  /// see [TripEntity.undeliverableCustomers]
  static final undeliverableCustomers =
      obx.QueryRelationToMany<TripEntity, UndeliverableCustomerModel>(
        _entities[13].relations[6],
      );

  /// see [TripEntity.transactions]
  static final transactions =
      obx.QueryRelationToMany<TripEntity, TransactionModel>(
        _entities[13].relations[7],
      );

  /// see [TripEntity.endTripChecklist]
  static final endTripChecklist =
      obx.QueryRelationToMany<TripEntity, EndTripChecklistModel>(
        _entities[13].relations[8],
      );

  /// see [TripEntity.tripUpdates]
  static final tripUpdates =
      obx.QueryRelationToMany<TripEntity, TripUpdateModel>(
        _entities[13].relations[9],
      );

  /// see [TripEntity.invoices]
  static final invoices = obx.QueryRelationToMany<TripEntity, InvoiceModel>(
    _entities[13].relations[10],
  );
}

/// [TripModel] entity fields to define ObjectBox queries.
class TripModel_ {
  /// See [TripModel.objectBoxId].
  static final objectBoxId = obx.QueryIntegerProperty<TripModel>(
    _entities[14].properties[0],
  );

  /// See [TripModel.pocketbaseId].
  static final pocketbaseId = obx.QueryStringProperty<TripModel>(
    _entities[14].properties[1],
  );
}

/// [UpdateTimelineEntity] entity fields to define ObjectBox queries.
class UpdateTimelineEntity_ {
  /// See [UpdateTimelineEntity.dbId].
  static final dbId = obx.QueryIntegerProperty<UpdateTimelineEntity>(
    _entities[15].properties[0],
  );

  /// See [UpdateTimelineEntity.id].
  static final id = obx.QueryStringProperty<UpdateTimelineEntity>(
    _entities[15].properties[1],
  );

  /// See [UpdateTimelineEntity.collectionId].
  static final collectionId = obx.QueryStringProperty<UpdateTimelineEntity>(
    _entities[15].properties[2],
  );

  /// See [UpdateTimelineEntity.collectionName].
  static final collectionName = obx.QueryStringProperty<UpdateTimelineEntity>(
    _entities[15].properties[3],
  );

  /// See [UpdateTimelineEntity.created].
  static final created = obx.QueryDateProperty<UpdateTimelineEntity>(
    _entities[15].properties[4],
  );

  /// See [UpdateTimelineEntity.updated].
  static final updated = obx.QueryDateProperty<UpdateTimelineEntity>(
    _entities[15].properties[5],
  );
}

/// [UpdateTimelineModel] entity fields to define ObjectBox queries.
class UpdateTimelineModel_ {
  /// See [UpdateTimelineModel.dbId].
  static final dbId = obx.QueryIntegerProperty<UpdateTimelineModel>(
    _entities[16].properties[0],
  );

  /// See [UpdateTimelineModel.id].
  static final id = obx.QueryStringProperty<UpdateTimelineModel>(
    _entities[16].properties[1],
  );

  /// See [UpdateTimelineModel.collectionId].
  static final collectionId = obx.QueryStringProperty<UpdateTimelineModel>(
    _entities[16].properties[2],
  );

  /// See [UpdateTimelineModel.collectionName].
  static final collectionName = obx.QueryStringProperty<UpdateTimelineModel>(
    _entities[16].properties[3],
  );

  /// See [UpdateTimelineModel.created].
  static final created = obx.QueryDateProperty<UpdateTimelineModel>(
    _entities[16].properties[4],
  );

  /// See [UpdateTimelineModel.updated].
  static final updated = obx.QueryDateProperty<UpdateTimelineModel>(
    _entities[16].properties[5],
  );
}

/// [VehicleEntity] entity fields to define ObjectBox queries.
class VehicleEntity_ {
  /// See [VehicleEntity.dbId].
  static final dbId = obx.QueryIntegerProperty<VehicleEntity>(
    _entities[17].properties[0],
  );

  /// See [VehicleEntity.id].
  static final id = obx.QueryStringProperty<VehicleEntity>(
    _entities[17].properties[1],
  );

  /// See [VehicleEntity.collectionId].
  static final collectionId = obx.QueryStringProperty<VehicleEntity>(
    _entities[17].properties[2],
  );

  /// See [VehicleEntity.collectionName].
  static final collectionName = obx.QueryStringProperty<VehicleEntity>(
    _entities[17].properties[3],
  );

  /// See [VehicleEntity.vehicleName].
  static final vehicleName = obx.QueryStringProperty<VehicleEntity>(
    _entities[17].properties[4],
  );

  /// See [VehicleEntity.vehiclePlateNumber].
  static final vehiclePlateNumber = obx.QueryStringProperty<VehicleEntity>(
    _entities[17].properties[5],
  );

  /// See [VehicleEntity.vehicleType].
  static final vehicleType = obx.QueryStringProperty<VehicleEntity>(
    _entities[17].properties[6],
  );

  /// See [VehicleEntity.created].
  static final created = obx.QueryDateProperty<VehicleEntity>(
    _entities[17].properties[7],
  );

  /// See [VehicleEntity.updated].
  static final updated = obx.QueryDateProperty<VehicleEntity>(
    _entities[17].properties[8],
  );

  /// See [VehicleEntity.deliveryTeam].
  static final deliveryTeam =
      obx.QueryRelationToOne<VehicleEntity, DeliveryTeamModel>(
        _entities[17].properties[9],
      );

  /// See [VehicleEntity.trip].
  static final trip = obx.QueryRelationToOne<VehicleEntity, TripModel>(
    _entities[17].properties[10],
  );
}

/// [VehicleModel] entity fields to define ObjectBox queries.
class VehicleModel_ {
  /// See [VehicleModel.objectBoxId].
  static final objectBoxId = obx.QueryIntegerProperty<VehicleModel>(
    _entities[18].properties[0],
  );

  /// See [VehicleModel.pocketbaseId].
  static final pocketbaseId = obx.QueryStringProperty<VehicleModel>(
    _entities[18].properties[1],
  );

  /// See [VehicleModel.tripId].
  static final tripId = obx.QueryStringProperty<VehicleModel>(
    _entities[18].properties[2],
  );

  /// See [VehicleModel.deliveryTeamId].
  static final deliveryTeamId = obx.QueryStringProperty<VehicleModel>(
    _entities[18].properties[3],
  );
}

/// [DeliveryTeamEntity] entity fields to define ObjectBox queries.
class DeliveryTeamEntity_ {
  /// See [DeliveryTeamEntity.dbId].
  static final dbId = obx.QueryIntegerProperty<DeliveryTeamEntity>(
    _entities[19].properties[0],
  );

  /// See [DeliveryTeamEntity.id].
  static final id = obx.QueryStringProperty<DeliveryTeamEntity>(
    _entities[19].properties[1],
  );

  /// See [DeliveryTeamEntity.collectionId].
  static final collectionId = obx.QueryStringProperty<DeliveryTeamEntity>(
    _entities[19].properties[2],
  );

  /// See [DeliveryTeamEntity.collectionName].
  static final collectionName = obx.QueryStringProperty<DeliveryTeamEntity>(
    _entities[19].properties[3],
  );

  /// See [DeliveryTeamEntity.activeDeliveries].
  static final activeDeliveries = obx.QueryIntegerProperty<DeliveryTeamEntity>(
    _entities[19].properties[4],
  );

  /// See [DeliveryTeamEntity.totalDelivered].
  static final totalDelivered = obx.QueryIntegerProperty<DeliveryTeamEntity>(
    _entities[19].properties[5],
  );

  /// See [DeliveryTeamEntity.totalDistanceTravelled].
  static final totalDistanceTravelled =
      obx.QueryDoubleProperty<DeliveryTeamEntity>(_entities[19].properties[6]);

  /// See [DeliveryTeamEntity.created].
  static final created = obx.QueryDateProperty<DeliveryTeamEntity>(
    _entities[19].properties[7],
  );

  /// See [DeliveryTeamEntity.updated].
  static final updated = obx.QueryDateProperty<DeliveryTeamEntity>(
    _entities[19].properties[8],
  );

  /// See [DeliveryTeamEntity.undeliveredCustomers].
  static final undeliveredCustomers =
      obx.QueryIntegerProperty<DeliveryTeamEntity>(_entities[19].properties[9]);

  /// See [DeliveryTeamEntity.trip].
  static final trip = obx.QueryRelationToOne<DeliveryTeamEntity, TripModel>(
    _entities[19].properties[10],
  );

  /// see [DeliveryTeamEntity.personels]
  static final personels =
      obx.QueryRelationToMany<DeliveryTeamEntity, PersonelModel>(
        _entities[19].relations[0],
      );

  /// see [DeliveryTeamEntity.checklist]
  static final checklist =
      obx.QueryRelationToMany<DeliveryTeamEntity, ChecklistModel>(
        _entities[19].relations[1],
      );

  /// see [DeliveryTeamEntity.vehicle]
  static final vehicle =
      obx.QueryRelationToMany<DeliveryTeamEntity, VehicleModel>(
        _entities[19].relations[2],
      );
}

/// [OtpModel] entity fields to define ObjectBox queries.
class OtpModel_ {
  /// See [OtpModel.dbId].
  static final dbId = obx.QueryIntegerProperty<OtpModel>(
    _entities[20].properties[0],
  );

  /// See [OtpModel.id].
  static final id = obx.QueryStringProperty<OtpModel>(
    _entities[20].properties[1],
  );

  /// See [OtpModel.otpCode].
  static final otpCode = obx.QueryStringProperty<OtpModel>(
    _entities[20].properties[2],
  );

  /// See [OtpModel.generatedCode].
  static final generatedCode = obx.QueryStringProperty<OtpModel>(
    _entities[20].properties[3],
  );

  /// See [OtpModel.isVerified].
  static final isVerified = obx.QueryBooleanProperty<OtpModel>(
    _entities[20].properties[4],
  );

  /// See [OtpModel.createdAt].
  static final createdAt = obx.QueryDateProperty<OtpModel>(
    _entities[20].properties[5],
  );

  /// See [OtpModel.expiresAt].
  static final expiresAt = obx.QueryDateProperty<OtpModel>(
    _entities[20].properties[6],
  );

  /// See [OtpModel.verifiedAt].
  static final verifiedAt = obx.QueryDateProperty<OtpModel>(
    _entities[20].properties[7],
  );

  /// See [OtpModel.trip].
  static final trip = obx.QueryRelationToOne<OtpModel, TripModel>(
    _entities[20].properties[8],
  );
}

/// [TransactionEntity] entity fields to define ObjectBox queries.
class TransactionEntity_ {
  /// See [TransactionEntity.dbId].
  static final dbId = obx.QueryIntegerProperty<TransactionEntity>(
    _entities[21].properties[0],
  );

  /// See [TransactionEntity.id].
  static final id = obx.QueryStringProperty<TransactionEntity>(
    _entities[21].properties[1],
  );

  /// See [TransactionEntity.collectionId].
  static final collectionId = obx.QueryStringProperty<TransactionEntity>(
    _entities[21].properties[2],
  );

  /// See [TransactionEntity.collectionName].
  static final collectionName = obx.QueryStringProperty<TransactionEntity>(
    _entities[21].properties[3],
  );

  /// See [TransactionEntity.customerName].
  static final customerName = obx.QueryStringProperty<TransactionEntity>(
    _entities[21].properties[4],
  );

  /// See [TransactionEntity.totalAmount].
  static final totalAmount = obx.QueryStringProperty<TransactionEntity>(
    _entities[21].properties[5],
  );

  /// See [TransactionEntity.deliveryNumber].
  static final deliveryNumber = obx.QueryStringProperty<TransactionEntity>(
    _entities[21].properties[6],
  );

  /// See [TransactionEntity.transactionDate].
  static final transactionDate = obx.QueryDateProperty<TransactionEntity>(
    _entities[21].properties[7],
  );

  /// See [TransactionEntity.createdAt].
  static final createdAt = obx.QueryDateProperty<TransactionEntity>(
    _entities[21].properties[8],
  );

  /// See [TransactionEntity.updatedAt].
  static final updatedAt = obx.QueryDateProperty<TransactionEntity>(
    _entities[21].properties[9],
  );

  /// See [TransactionEntity.isCompleted].
  static final isCompleted = obx.QueryBooleanProperty<TransactionEntity>(
    _entities[21].properties[10],
  );

  /// See [TransactionEntity.transactionStatusString].
  static final transactionStatusString =
      obx.QueryStringProperty<TransactionEntity>(_entities[21].properties[11]);

  /// See [TransactionEntity.modeOfPaymentString].
  static final modeOfPaymentString = obx.QueryStringProperty<TransactionEntity>(
    _entities[21].properties[12],
  );

  /// See [TransactionEntity.customerImage].
  static final customerImage = obx.QueryStringProperty<TransactionEntity>(
    _entities[21].properties[13],
  );

  /// See [TransactionEntity.refNumber].
  static final refNumber = obx.QueryStringProperty<TransactionEntity>(
    _entities[21].properties[14],
  );

  /// See [TransactionEntity.tripRef].
  static final tripRef = obx.QueryRelationToOne<TransactionEntity, TripModel>(
    _entities[21].properties[15],
  );

  /// See [TransactionEntity.completedCustomerRef].
  static final completedCustomerRef =
      obx.QueryRelationToOne<TransactionEntity, CompletedCustomerModel>(
        _entities[21].properties[16],
      );

  /// See [TransactionEntity.customer].
  static final customer =
      obx.QueryRelationToOne<TransactionEntity, CustomerModel>(
        _entities[21].properties[17],
      );

  /// see [TransactionEntity.invoices]
  static final invoices =
      obx.QueryRelationToMany<TransactionEntity, InvoiceEntity>(
        _entities[21].relations[0],
      );
}

/// [TransactionModel] entity fields to define ObjectBox queries.
class TransactionModel_ {
  /// See [TransactionModel.objectBoxId].
  static final objectBoxId = obx.QueryIntegerProperty<TransactionModel>(
    _entities[22].properties[0],
  );

  /// See [TransactionModel.pocketbaseId].
  static final pocketbaseId = obx.QueryStringProperty<TransactionModel>(
    _entities[22].properties[1],
  );

  /// See [TransactionModel.customerId].
  static final customerId = obx.QueryStringProperty<TransactionModel>(
    _entities[22].properties[2],
  );

  /// See [TransactionModel.tripId].
  static final tripId = obx.QueryStringProperty<TransactionModel>(
    _entities[22].properties[3],
  );

  /// See [TransactionModel.completedCustomerId].
  static final completedCustomerId = obx.QueryStringProperty<TransactionModel>(
    _entities[22].properties[4],
  );

  /// See [TransactionModel.transactionDate].
  static final transactionDate = obx.QueryDateProperty<TransactionModel>(
    _entities[22].properties[5],
  );
}

/// [LocalUsersModel] entity fields to define ObjectBox queries.
class LocalUsersModel_ {
  /// See [LocalUsersModel.objectBoxId].
  static final objectBoxId = obx.QueryIntegerProperty<LocalUsersModel>(
    _entities[23].properties[0],
  );

  /// See [LocalUsersModel.pocketbaseId].
  static final pocketbaseId = obx.QueryStringProperty<LocalUsersModel>(
    _entities[23].properties[1],
  );

  /// See [LocalUsersModel.tripId].
  static final tripId = obx.QueryStringProperty<LocalUsersModel>(
    _entities[23].properties[2],
  );

  /// See [LocalUsersModel.deliveryTeamId].
  static final deliveryTeamId = obx.QueryStringProperty<LocalUsersModel>(
    _entities[23].properties[3],
  );

  /// See [LocalUsersModel.token].
  static final token = obx.QueryStringProperty<LocalUsersModel>(
    _entities[23].properties[4],
  );
}

/// [DeliveryTeamModel] entity fields to define ObjectBox queries.
class DeliveryTeamModel_ {
  /// See [DeliveryTeamModel.objectBoxId].
  static final objectBoxId = obx.QueryIntegerProperty<DeliveryTeamModel>(
    _entities[24].properties[0],
  );

  /// See [DeliveryTeamModel.pocketbaseId].
  static final pocketbaseId = obx.QueryStringProperty<DeliveryTeamModel>(
    _entities[24].properties[1],
  );

  /// See [DeliveryTeamModel.tripId].
  static final tripId = obx.QueryStringProperty<DeliveryTeamModel>(
    _entities[24].properties[2],
  );
}

/// [ReturnEntity] entity fields to define ObjectBox queries.
class ReturnEntity_ {
  /// See [ReturnEntity.dbId].
  static final dbId = obx.QueryIntegerProperty<ReturnEntity>(
    _entities[25].properties[0],
  );

  /// See [ReturnEntity.id].
  static final id = obx.QueryStringProperty<ReturnEntity>(
    _entities[25].properties[1],
  );

  /// See [ReturnEntity.collectionId].
  static final collectionId = obx.QueryStringProperty<ReturnEntity>(
    _entities[25].properties[2],
  );

  /// See [ReturnEntity.collectionName].
  static final collectionName = obx.QueryStringProperty<ReturnEntity>(
    _entities[25].properties[3],
  );

  /// See [ReturnEntity.productName].
  static final productName = obx.QueryStringProperty<ReturnEntity>(
    _entities[25].properties[4],
  );

  /// See [ReturnEntity.productDescription].
  static final productDescription = obx.QueryStringProperty<ReturnEntity>(
    _entities[25].properties[5],
  );

  /// See [ReturnEntity.returnDate].
  static final returnDate = obx.QueryDateProperty<ReturnEntity>(
    _entities[25].properties[6],
  );

  /// See [ReturnEntity.productQuantityCase].
  static final productQuantityCase = obx.QueryIntegerProperty<ReturnEntity>(
    _entities[25].properties[7],
  );

  /// See [ReturnEntity.productQuantityPcs].
  static final productQuantityPcs = obx.QueryIntegerProperty<ReturnEntity>(
    _entities[25].properties[8],
  );

  /// See [ReturnEntity.invoiceRef].
  static final invoiceRef = obx.QueryRelationToOne<ReturnEntity, InvoiceModel>(
    _entities[25].properties[9],
  );

  /// See [ReturnEntity.customerRef].
  static final customerRef =
      obx.QueryRelationToOne<ReturnEntity, CustomerModel>(
        _entities[25].properties[10],
      );

  /// See [ReturnEntity.tripRef].
  static final tripRef = obx.QueryRelationToOne<ReturnEntity, TripModel>(
    _entities[25].properties[11],
  );

  /// See [ReturnEntity.productQuantityPack].
  static final productQuantityPack = obx.QueryIntegerProperty<ReturnEntity>(
    _entities[25].properties[12],
  );

  /// See [ReturnEntity.productQuantityBox].
  static final productQuantityBox = obx.QueryIntegerProperty<ReturnEntity>(
    _entities[25].properties[13],
  );

  /// See [ReturnEntity.isCase].
  static final isCase = obx.QueryBooleanProperty<ReturnEntity>(
    _entities[25].properties[14],
  );

  /// See [ReturnEntity.isPcs].
  static final isPcs = obx.QueryBooleanProperty<ReturnEntity>(
    _entities[25].properties[15],
  );

  /// See [ReturnEntity.isBox].
  static final isBox = obx.QueryBooleanProperty<ReturnEntity>(
    _entities[25].properties[16],
  );

  /// See [ReturnEntity.isPack].
  static final isPack = obx.QueryBooleanProperty<ReturnEntity>(
    _entities[25].properties[17],
  );
}

/// [ReturnModel] entity fields to define ObjectBox queries.
class ReturnModel_ {
  /// See [ReturnModel.objectBoxId].
  static final objectBoxId = obx.QueryIntegerProperty<ReturnModel>(
    _entities[26].properties[0],
  );

  /// See [ReturnModel.pocketbaseId].
  static final pocketbaseId = obx.QueryStringProperty<ReturnModel>(
    _entities[26].properties[1],
  );

  /// See [ReturnModel.tripId].
  static final tripId = obx.QueryStringProperty<ReturnModel>(
    _entities[26].properties[2],
  );
}

/// [CompletedCustomerModel] entity fields to define ObjectBox queries.
class CompletedCustomerModel_ {
  /// See [CompletedCustomerModel.objectBoxId].
  static final objectBoxId = obx.QueryIntegerProperty<CompletedCustomerModel>(
    _entities[27].properties[0],
  );

  /// See [CompletedCustomerModel.pocketbaseId].
  static final pocketbaseId = obx.QueryStringProperty<CompletedCustomerModel>(
    _entities[27].properties[1],
  );

  /// See [CompletedCustomerModel.tripId].
  static final tripId = obx.QueryStringProperty<CompletedCustomerModel>(
    _entities[27].properties[2],
  );

  /// See [CompletedCustomerModel.timeCompleted].
  static final timeCompleted = obx.QueryDateProperty<CompletedCustomerModel>(
    _entities[27].properties[3],
  );
}

/// [CompletedCustomerEntity] entity fields to define ObjectBox queries.
class CompletedCustomerEntity_ {
  /// See [CompletedCustomerEntity.dbId].
  static final dbId = obx.QueryIntegerProperty<CompletedCustomerEntity>(
    _entities[28].properties[0],
  );

  /// See [CompletedCustomerEntity.id].
  static final id = obx.QueryStringProperty<CompletedCustomerEntity>(
    _entities[28].properties[1],
  );

  /// See [CompletedCustomerEntity.collectionId].
  static final collectionId = obx.QueryStringProperty<CompletedCustomerEntity>(
    _entities[28].properties[2],
  );

  /// See [CompletedCustomerEntity.collectionName].
  static final collectionName =
      obx.QueryStringProperty<CompletedCustomerEntity>(
        _entities[28].properties[3],
      );

  /// See [CompletedCustomerEntity.deliveryNumber].
  static final deliveryNumber =
      obx.QueryStringProperty<CompletedCustomerEntity>(
        _entities[28].properties[4],
      );

  /// See [CompletedCustomerEntity.storeName].
  static final storeName = obx.QueryStringProperty<CompletedCustomerEntity>(
    _entities[28].properties[5],
  );

  /// See [CompletedCustomerEntity.ownerName].
  static final ownerName = obx.QueryStringProperty<CompletedCustomerEntity>(
    _entities[28].properties[6],
  );

  /// See [CompletedCustomerEntity.contactNumber].
  static final contactNumber =
      obx.QueryStringVectorProperty<CompletedCustomerEntity>(
        _entities[28].properties[7],
      );

  /// See [CompletedCustomerEntity.address].
  static final address = obx.QueryStringProperty<CompletedCustomerEntity>(
    _entities[28].properties[8],
  );

  /// See [CompletedCustomerEntity.municipality].
  static final municipality = obx.QueryStringProperty<CompletedCustomerEntity>(
    _entities[28].properties[9],
  );

  /// See [CompletedCustomerEntity.province].
  static final province = obx.QueryStringProperty<CompletedCustomerEntity>(
    _entities[28].properties[10],
  );

  /// See [CompletedCustomerEntity.modeOfPayment].
  static final modeOfPayment = obx.QueryStringProperty<CompletedCustomerEntity>(
    _entities[28].properties[11],
  );

  /// See [CompletedCustomerEntity.timeCompleted].
  static final timeCompleted = obx.QueryDateProperty<CompletedCustomerEntity>(
    _entities[28].properties[12],
  );

  /// See [CompletedCustomerEntity.totalAmount].
  static final totalAmount = obx.QueryDoubleProperty<CompletedCustomerEntity>(
    _entities[28].properties[13],
  );

  /// See [CompletedCustomerEntity.transactionRef].
  static final transactionRef =
      obx.QueryRelationToOne<CompletedCustomerEntity, TransactionModel>(
        _entities[28].properties[14],
      );

  /// See [CompletedCustomerEntity.customerRef].
  static final customerRef =
      obx.QueryRelationToOne<CompletedCustomerEntity, CustomerModel>(
        _entities[28].properties[15],
      );

  /// See [CompletedCustomerEntity.trip].
  static final trip =
      obx.QueryRelationToOne<CompletedCustomerEntity, TripModel>(
        _entities[28].properties[16],
      );

  /// See [CompletedCustomerEntity.totalTime].
  static final totalTime = obx.QueryStringProperty<CompletedCustomerEntity>(
    _entities[28].properties[17],
  );

  /// See [CompletedCustomerEntity.modeOfPaymentString].
  static final modeOfPaymentString =
      obx.QueryStringProperty<CompletedCustomerEntity>(
        _entities[28].properties[18],
      );

  /// see [CompletedCustomerEntity.invoices]
  static final invoices =
      obx.QueryRelationToMany<CompletedCustomerEntity, InvoiceModel>(
        _entities[28].relations[0],
      );

  /// see [CompletedCustomerEntity.deliveryStatus]
  static final deliveryStatus =
      obx.QueryRelationToMany<CompletedCustomerEntity, DeliveryUpdateModel>(
        _entities[28].relations[1],
      );

  /// see [CompletedCustomerEntity.returns]
  static final returns =
      obx.QueryRelationToMany<CompletedCustomerEntity, ReturnModel>(
        _entities[28].relations[2],
      );
}

/// [UndeliverableCustomerModel] entity fields to define ObjectBox queries.
class UndeliverableCustomerModel_ {
  /// See [UndeliverableCustomerModel.objectBoxId].
  static final objectBoxId =
      obx.QueryIntegerProperty<UndeliverableCustomerModel>(
        _entities[29].properties[0],
      );

  /// See [UndeliverableCustomerModel.pocketbaseId].
  static final pocketbaseId =
      obx.QueryStringProperty<UndeliverableCustomerModel>(
        _entities[29].properties[1],
      );

  /// See [UndeliverableCustomerModel.tripId].
  static final tripId = obx.QueryStringProperty<UndeliverableCustomerModel>(
    _entities[29].properties[2],
  );

  /// See [UndeliverableCustomerModel.customerId].
  static final customerId = obx.QueryStringProperty<UndeliverableCustomerModel>(
    _entities[29].properties[3],
  );
}

/// [EndChecklistEntity] entity fields to define ObjectBox queries.
class EndChecklistEntity_ {
  /// See [EndChecklistEntity.dbId].
  static final dbId = obx.QueryIntegerProperty<EndChecklistEntity>(
    _entities[30].properties[0],
  );

  /// See [EndChecklistEntity.id].
  static final id = obx.QueryStringProperty<EndChecklistEntity>(
    _entities[30].properties[1],
  );

  /// See [EndChecklistEntity.objectName].
  static final objectName = obx.QueryStringProperty<EndChecklistEntity>(
    _entities[30].properties[2],
  );

  /// See [EndChecklistEntity.isChecked].
  static final isChecked = obx.QueryBooleanProperty<EndChecklistEntity>(
    _entities[30].properties[3],
  );

  /// See [EndChecklistEntity.status].
  static final status = obx.QueryStringProperty<EndChecklistEntity>(
    _entities[30].properties[4],
  );

  /// See [EndChecklistEntity.timeCompleted].
  static final timeCompleted = obx.QueryDateProperty<EndChecklistEntity>(
    _entities[30].properties[5],
  );

  /// See [EndChecklistEntity.trip].
  static final trip = obx.QueryStringProperty<EndChecklistEntity>(
    _entities[30].properties[6],
  );
}

/// [EndTripChecklistModel] entity fields to define ObjectBox queries.
class EndTripChecklistModel_ {
  /// See [EndTripChecklistModel.dbId].
  static final dbId = obx.QueryIntegerProperty<EndTripChecklistModel>(
    _entities[31].properties[0],
  );

  /// See [EndTripChecklistModel.id].
  static final id = obx.QueryStringProperty<EndTripChecklistModel>(
    _entities[31].properties[1],
  );

  /// See [EndTripChecklistModel.objectName].
  static final objectName = obx.QueryStringProperty<EndTripChecklistModel>(
    _entities[31].properties[2],
  );

  /// See [EndTripChecklistModel.isChecked].
  static final isChecked = obx.QueryBooleanProperty<EndTripChecklistModel>(
    _entities[31].properties[3],
  );

  /// See [EndTripChecklistModel.status].
  static final status = obx.QueryStringProperty<EndTripChecklistModel>(
    _entities[31].properties[4],
  );

  /// See [EndTripChecklistModel.trip].
  static final trip = obx.QueryStringProperty<EndTripChecklistModel>(
    _entities[31].properties[5],
  );
}

/// [UndeliverableCustomerEntity] entity fields to define ObjectBox queries.
class UndeliverableCustomerEntity_ {
  /// See [UndeliverableCustomerEntity.dbId].
  static final dbId = obx.QueryIntegerProperty<UndeliverableCustomerEntity>(
    _entities[32].properties[0],
  );

  /// See [UndeliverableCustomerEntity.id].
  static final id = obx.QueryStringProperty<UndeliverableCustomerEntity>(
    _entities[32].properties[1],
  );

  /// See [UndeliverableCustomerEntity.collectionId].
  static final collectionId =
      obx.QueryStringProperty<UndeliverableCustomerEntity>(
        _entities[32].properties[2],
      );

  /// See [UndeliverableCustomerEntity.collectionName].
  static final collectionName =
      obx.QueryStringProperty<UndeliverableCustomerEntity>(
        _entities[32].properties[3],
      );

  /// See [UndeliverableCustomerEntity.deliveryNumber].
  static final deliveryNumber =
      obx.QueryStringProperty<UndeliverableCustomerEntity>(
        _entities[32].properties[4],
      );

  /// See [UndeliverableCustomerEntity.storeName].
  static final storeName = obx.QueryStringProperty<UndeliverableCustomerEntity>(
    _entities[32].properties[5],
  );

  /// See [UndeliverableCustomerEntity.ownerName].
  static final ownerName = obx.QueryStringProperty<UndeliverableCustomerEntity>(
    _entities[32].properties[6],
  );

  /// See [UndeliverableCustomerEntity.contactNumber].
  static final contactNumber =
      obx.QueryStringVectorProperty<UndeliverableCustomerEntity>(
        _entities[32].properties[7],
      );

  /// See [UndeliverableCustomerEntity.address].
  static final address = obx.QueryStringProperty<UndeliverableCustomerEntity>(
    _entities[32].properties[8],
  );

  /// See [UndeliverableCustomerEntity.municipality].
  static final municipality =
      obx.QueryStringProperty<UndeliverableCustomerEntity>(
        _entities[32].properties[9],
      );

  /// See [UndeliverableCustomerEntity.province].
  static final province = obx.QueryStringProperty<UndeliverableCustomerEntity>(
    _entities[32].properties[10],
  );

  /// See [UndeliverableCustomerEntity.modeOfPayment].
  static final modeOfPayment =
      obx.QueryStringProperty<UndeliverableCustomerEntity>(
        _entities[32].properties[11],
      );

  /// See [UndeliverableCustomerEntity.time].
  static final time = obx.QueryDateProperty<UndeliverableCustomerEntity>(
    _entities[32].properties[12],
  );

  /// See [UndeliverableCustomerEntity.created].
  static final created = obx.QueryDateProperty<UndeliverableCustomerEntity>(
    _entities[32].properties[13],
  );

  /// See [UndeliverableCustomerEntity.updated].
  static final updated = obx.QueryDateProperty<UndeliverableCustomerEntity>(
    _entities[32].properties[14],
  );

  /// See [UndeliverableCustomerEntity.customerImage].
  static final customerImage =
      obx.QueryStringProperty<UndeliverableCustomerEntity>(
        _entities[32].properties[15],
      );

  /// See [UndeliverableCustomerEntity.customerRef].
  static final customerRef =
      obx.QueryRelationToOne<UndeliverableCustomerEntity, CustomerModel>(
        _entities[32].properties[16],
      );

  /// See [UndeliverableCustomerEntity.tripRef].
  static final tripRef =
      obx.QueryRelationToOne<UndeliverableCustomerEntity, TripModel>(
        _entities[32].properties[17],
      );

  /// see [UndeliverableCustomerEntity.invoices]
  static final invoices =
      obx.QueryRelationToMany<UndeliverableCustomerEntity, InvoiceModel>(
        _entities[32].relations[0],
      );
}

/// [TripUpdateEntity] entity fields to define ObjectBox queries.
class TripUpdateEntity_ {
  /// See [TripUpdateEntity.dbId].
  static final dbId = obx.QueryIntegerProperty<TripUpdateEntity>(
    _entities[33].properties[0],
  );

  /// See [TripUpdateEntity.id].
  static final id = obx.QueryStringProperty<TripUpdateEntity>(
    _entities[33].properties[1],
  );

  /// See [TripUpdateEntity.collectionId].
  static final collectionId = obx.QueryStringProperty<TripUpdateEntity>(
    _entities[33].properties[2],
  );

  /// See [TripUpdateEntity.collectionName].
  static final collectionName = obx.QueryStringProperty<TripUpdateEntity>(
    _entities[33].properties[3],
  );

  /// See [TripUpdateEntity.date].
  static final date = obx.QueryDateProperty<TripUpdateEntity>(
    _entities[33].properties[4],
  );

  /// See [TripUpdateEntity.image].
  static final image = obx.QueryStringProperty<TripUpdateEntity>(
    _entities[33].properties[5],
  );

  /// See [TripUpdateEntity.description].
  static final description = obx.QueryStringProperty<TripUpdateEntity>(
    _entities[33].properties[6],
  );

  /// See [TripUpdateEntity.latitude].
  static final latitude = obx.QueryStringProperty<TripUpdateEntity>(
    _entities[33].properties[7],
  );

  /// See [TripUpdateEntity.longitude].
  static final longitude = obx.QueryStringProperty<TripUpdateEntity>(
    _entities[33].properties[8],
  );

  /// See [TripUpdateEntity.trip].
  static final trip = obx.QueryRelationToOne<TripUpdateEntity, TripModel>(
    _entities[33].properties[9],
  );
}

/// [TripUpdateModel] entity fields to define ObjectBox queries.
class TripUpdateModel_ {
  /// See [TripUpdateModel.objectBoxId].
  static final objectBoxId = obx.QueryIntegerProperty<TripUpdateModel>(
    _entities[34].properties[0],
  );

  /// See [TripUpdateModel.pocketbaseId].
  static final pocketbaseId = obx.QueryStringProperty<TripUpdateModel>(
    _entities[34].properties[1],
  );

  /// See [TripUpdateModel.tripId].
  static final tripId = obx.QueryStringProperty<TripUpdateModel>(
    _entities[34].properties[2],
  );
}

/// [EndTripOtpModel] entity fields to define ObjectBox queries.
class EndTripOtpModel_ {
  /// See [EndTripOtpModel.dbId].
  static final dbId = obx.QueryIntegerProperty<EndTripOtpModel>(
    _entities[35].properties[0],
  );

  /// See [EndTripOtpModel.id].
  static final id = obx.QueryStringProperty<EndTripOtpModel>(
    _entities[35].properties[1],
  );

  /// See [EndTripOtpModel.otpCode].
  static final otpCode = obx.QueryStringProperty<EndTripOtpModel>(
    _entities[35].properties[2],
  );

  /// See [EndTripOtpModel.generatedCode].
  static final generatedCode = obx.QueryStringProperty<EndTripOtpModel>(
    _entities[35].properties[3],
  );

  /// See [EndTripOtpModel.isVerified].
  static final isVerified = obx.QueryBooleanProperty<EndTripOtpModel>(
    _entities[35].properties[4],
  );

  /// See [EndTripOtpModel.createdAt].
  static final createdAt = obx.QueryDateProperty<EndTripOtpModel>(
    _entities[35].properties[5],
  );

  /// See [EndTripOtpModel.expiresAt].
  static final expiresAt = obx.QueryDateProperty<EndTripOtpModel>(
    _entities[35].properties[6],
  );

  /// See [EndTripOtpModel.verifiedAt].
  static final verifiedAt = obx.QueryDateProperty<EndTripOtpModel>(
    _entities[35].properties[7],
  );

  /// See [EndTripOtpModel.trip].
  static final trip = obx.QueryRelationToOne<EndTripOtpModel, TripModel>(
    _entities[35].properties[8],
  );
}

/// [EndTripOtpEntity] entity fields to define ObjectBox queries.
class EndTripOtpEntity_ {
  /// See [EndTripOtpEntity.dbId].
  static final dbId = obx.QueryIntegerProperty<EndTripOtpEntity>(
    _entities[36].properties[0],
  );

  /// See [EndTripOtpEntity.id].
  static final id = obx.QueryStringProperty<EndTripOtpEntity>(
    _entities[36].properties[1],
  );

  /// See [EndTripOtpEntity.otpCode].
  static final otpCode = obx.QueryStringProperty<EndTripOtpEntity>(
    _entities[36].properties[2],
  );

  /// See [EndTripOtpEntity.generatedCode].
  static final generatedCode = obx.QueryStringProperty<EndTripOtpEntity>(
    _entities[36].properties[3],
  );

  /// See [EndTripOtpEntity.isVerified].
  static final isVerified = obx.QueryBooleanProperty<EndTripOtpEntity>(
    _entities[36].properties[4],
  );

  /// See [EndTripOtpEntity.createdAt].
  static final createdAt = obx.QueryDateProperty<EndTripOtpEntity>(
    _entities[36].properties[5],
  );

  /// See [EndTripOtpEntity.expiresAt].
  static final expiresAt = obx.QueryDateProperty<EndTripOtpEntity>(
    _entities[36].properties[6],
  );

  /// See [EndTripOtpEntity.verifiedAt].
  static final verifiedAt = obx.QueryDateProperty<EndTripOtpEntity>(
    _entities[36].properties[7],
  );

  /// See [EndTripOtpEntity.trip].
  static final trip = obx.QueryRelationToOne<EndTripOtpEntity, TripModel>(
    _entities[36].properties[8],
  );

  /// See [EndTripOtpEntity.endTripOdometer].
  static final endTripOdometer = obx.QueryStringProperty<EndTripOtpEntity>(
    _entities[36].properties[9],
  );
}

/// [OtpEntity] entity fields to define ObjectBox queries.
class OtpEntity_ {
  /// See [OtpEntity.dbId].
  static final dbId = obx.QueryIntegerProperty<OtpEntity>(
    _entities[37].properties[0],
  );

  /// See [OtpEntity.id].
  static final id = obx.QueryStringProperty<OtpEntity>(
    _entities[37].properties[1],
  );

  /// See [OtpEntity.otpCode].
  static final otpCode = obx.QueryStringProperty<OtpEntity>(
    _entities[37].properties[2],
  );

  /// See [OtpEntity.generatedCode].
  static final generatedCode = obx.QueryStringProperty<OtpEntity>(
    _entities[37].properties[3],
  );

  /// See [OtpEntity.isVerified].
  static final isVerified = obx.QueryBooleanProperty<OtpEntity>(
    _entities[37].properties[4],
  );

  /// See [OtpEntity.createdAt].
  static final createdAt = obx.QueryDateProperty<OtpEntity>(
    _entities[37].properties[5],
  );

  /// See [OtpEntity.expiresAt].
  static final expiresAt = obx.QueryDateProperty<OtpEntity>(
    _entities[37].properties[6],
  );

  /// See [OtpEntity.verifiedAt].
  static final verifiedAt = obx.QueryDateProperty<OtpEntity>(
    _entities[37].properties[7],
  );

  /// See [OtpEntity.trip].
  static final trip = obx.QueryRelationToOne<OtpEntity, TripModel>(
    _entities[37].properties[8],
  );

  /// See [OtpEntity.intransitOdometer].
  static final intransitOdometer = obx.QueryStringProperty<OtpEntity>(
    _entities[37].properties[9],
  );
}
